{"version":3,"file":"decent-js.es5.js","sources":["../src/api/database.ts","../src/api/chain.ts","../src/transactionOperator.ts","../src/content.ts","../node_modules/src/util/root.ts","../node_modules/src/util/isFunction.ts","../node_modules/src/util/isArray.ts","../node_modules/src/util/isObject.ts","../node_modules/src/util/errorObject.ts","../node_modules/src/util/tryCatch.ts","../node_modules/src/util/UnsubscriptionError.ts","../node_modules/src/Subscription.ts","../node_modules/src/Observer.ts","../node_modules/src/symbol/rxSubscriber.ts","../node_modules/src/Subscriber.ts","../node_modules/src/util/toSubscriber.ts","../node_modules/src/symbol/observable.ts","../node_modules/src/util/noop.ts","../node_modules/src/util/pipe.ts","../node_modules/src/Observable.ts","../src/crypt.ts","../src/account.ts","../src/api/core.ts","../src/decent.ts","../src/utils.ts"],"sourcesContent":["export class ConnectionStatus {\n  static open = 'open'\n}\n\nexport class DatabaseError {\n  static chain_connection_failed = 'chain_connection_failed'\n  static chain_connecting = 'chain_connecting'\n  static database_execution_failed = 'database_execution_failed'\n}\n\nexport class DatabaseOperation {\n  static searchContent = 'search_content'\n  static getAccountByName = 'get_account_by_name'\n  static getAccounts = 'get_accounts'\n  static searchAccountHistory = 'search_account_history'\n  static getAccountBalances = 'get_account_balances'\n  static generateContentKeys = 'generate_content_keys'\n  static restoreEncryptionKey = 'restore_encryption_key'\n}\n\nexport interface DatabaseConfig {\n  decent_network_wspaths: string[]\n}\n\nexport class Database {\n  protected _api: any\n}\n\nexport class DatabaseApi extends Database {\n  private _config: DatabaseConfig\n  protected _api: any\n  private _connectionStatus: string\n  private _apiConnector: Promise<any>\n\n  public static create(\n    config: DatabaseConfig,\n    api: any,\n    chainStore: any\n  ): DatabaseApi {\n    return new DatabaseApi(config, api, chainStore)\n  }\n\n  private dbApi(): any {\n    return this._api.instance().db_api()\n  }\n\n  constructor(config: DatabaseConfig, api: any, chainStore: any) {\n    super()\n    this._config = config\n    this._api = api\n  }\n\n  public initApi(addresses: string[], forApi: any): Promise<any> {\n    // TODO: when not connected yet, calls throws errors\n    forApi.setRpcConnectionStatusCallback((status: any) => {\n      this._connectionStatus = status\n    })\n    this._apiConnector = new Promise((resolve, reject) => {\n      this.connectDaemon(\n        forApi,\n        addresses,\n        () => {\n          resolve()\n        },\n        (error: string) => {\n          reject(error)\n        }\n      )\n    })\n    return this._apiConnector\n  }\n\n  private connectDaemon(\n    toApi: any,\n    addresses: string[],\n    onSuccess: () => void,\n    onError: (error: string) => void,\n    addressIndex: number = 0\n  ): Promise<any> | boolean {\n    if (addresses.length <= addressIndex) {\n      onError(DatabaseError.chain_connection_failed)\n      return false\n    }\n    const address = addresses[addressIndex]\n\n    return toApi\n      .instance(address, true)\n      .init_promise.then(() => {\n        onSuccess()\n      })\n      .catch((reason: any) => {\n        this.connectDaemon(\n          toApi,\n          addresses,\n          onSuccess,\n          onError,\n          addressIndex + 1\n        )\n      })\n  }\n\n  public execute(\n    operation: DatabaseOperation,\n    parameters: any[]\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this._apiConnector.then(() => {\n        this.dbApi()\n          .exec(operation, parameters)\n          .then((content: any) => resolve(content))\n          .catch((err: any) => {\n            // TODO: handle errors to DBApi errors\n            reject(DatabaseError.database_execution_failed)\n          })\n      })\n    })\n  }\n}\n","const {FetchChain, TransactionHelper, ChainStore, types} = require('decentjs-lib/lib');\nconst {map} = types;\n\nexport interface ChainMethod {\n    name: string\n    param: any\n}\n\n/**\n * Listing of methods available to be called\n * in blockchain.\n */\nexport class ChainMethods {\n    static getAccount = 'getAccount';\n    static getAsset = 'getAsset';\n    static getObject = 'getObject';\n\n    private _commands: ChainMethod[] = [];\n    get commands(): ChainMethod[] {\n        return this._commands;\n    }\n\n    add(method: string, params: any) {\n        this._commands.push({name: method, param: params});\n    }\n}\n\nexport class ChainApi {\n    static asset = 'DCT';\n    static asset_id = '1.3.0';\n    private _apiConnector: Promise<any>;\n\n    /**\n     * Generates random sequence of bytes\n     */\n    public static generateNonce(): string {\n        return TransactionHelper.unique_nonce_uint64();\n    }\n\n    public static setupChain(chainId: string, chainConfig: any) {\n        chainConfig.networks.decent = {\n            chain_id: chainId\n        };\n    }\n\n    constructor(apiConnector: Promise<any>) {\n        this._apiConnector = apiConnector;\n    }\n\n    /**\n     * Fetches data from blockchain with given chain methods.\n     *\n     * Returns Promise.all with resolve result as array of results\n     * in order of adding into ChainMethod\n     *\n     * @param {ChainMethods} methods\n     * @return {Promise<any[]>}\n     */\n    public fetch(methods: ChainMethods): Promise<any[]> {\n        return new Promise((resolve, reject) => {\n            this._apiConnector.then(() => {\n                ChainStore.init().then(() => {\n                    const commands = methods.commands.map(op => FetchChain(op.name, op.param));\n                    Promise.all(commands)\n                        .then((result) => resolve(result))\n                        .catch(err => reject(err));\n                });\n            });\n        });\n    }\n}\n","import { Synopsis } from './content'\n\nconst { TransactionBuilder, ops } = require('decentjs-lib/lib')\n\n/**\n * Operation to be broadcasted to blockchain\n * internal representation\n */\nexport interface TransactionOperation {\n  name: string\n  operation: Transaction\n}\n\n/**\n * Class contains available transaction operation names constants\n */\nexport class TransactionOperationName {\n  static transfer = 'transfer'\n  static content_cancellation = 'content_cancellation'\n  static requestToBuy = 'request_to_buy'\n  static content_submit = 'content_submit'\n}\n\n/**\n * Asset represent amount of specific\n * asset.\n */\nexport interface Asset {\n  amount: number\n  asset_id: string\n}\n\n/**\n * Memo message object representation\n */\nexport interface Memo {\n  from: string\n  to: string\n  nonce: string\n  message: Buffer\n}\n\n/**\n * Transaction operations generalization\n */\nexport interface Transaction {}\n\n/**\n * Transfer operation between two accounts\n * represented by from/to string ids\n *\n * !Important: asset need to be calculated to specific asset\n */\nexport interface TransferOperation extends Transaction {\n  from: string\n  to: string\n  amount: Asset\n  memo: Memo\n}\n\nexport interface ContentCancelOperation extends Transaction {\n  author: string\n  URI: string\n}\n\nexport interface BuyContentOperation extends Transaction {\n  URI: string\n  consumer: string\n  price: Asset\n  region_code_from: number\n  pubKey: Key\n}\n\nexport interface SubmitContentOperation extends Transaction {\n  size: number\n  author: string\n  co_authors: any[]\n  URI: string\n  quorum: number\n  price: RegionalPrice[]\n  hash: string\n  seeders: string[]\n  key_parts: KeyParts[]\n  expiration: string\n  publishing_fee: Asset\n  synopsis: string\n}\n\n// userRights: content.userRights,\n\nexport interface Key {\n  s: string\n}\n\nexport interface KeyParts {\n  C1: Key\n  D1: Key\n}\n\nexport interface RegionalPrice {\n  region: number\n  price: Asset\n}\n\n/**\n * // TODO: Create wrapper class for TransactionBuilder for stronger typing\n * Provides methods to manipulate and broadcast transactions to\n * network.\n */\nexport class TransactionOperator {\n  static DCTPower = Math.pow(10, 8)\n\n  public static createTransaction(): any {\n    return new TransactionBuilder()\n  }\n\n  public static createAsset(amount: number, assetId: string): Asset {\n    return {\n      amount: Math.floor(amount * TransactionOperator.DCTPower),\n      asset_id: assetId\n    }\n  }\n\n  /**\n     * Add requested operation to transaction object.\n     *\n     * If operation does not exist or data property of\n     * operation object does not match required properties\n     * false is returned.\n     *\n     * @param {TransactionOperation} operation\n     * @param transaction TransactionBuilder instance\n     * @return {boolean}\n     */\n  public static addOperation(\n    operation: TransactionOperation,\n    transaction: any\n  ): boolean {\n    if (!ops.hasOwnProperty(operation.name)) {\n      return false\n    }\n    ops[operation.name].keys.forEach((key: string) => {\n      if (!operation.operation.hasOwnProperty(key)) {\n        return false\n      }\n    })\n    transaction.add_type_operation(operation.name, operation.operation)\n    return true\n  }\n\n  /**\n     * broadcastTransaction will set required fees for operation,\n     * sign operation with public/private keys and broadcast is\n     * to blockchain\n     *\n     * @param transaction TransactionBuilder instance with requested operations\n     * @param {string} privateKey\n     * @param {string} publicKey\n     * @return {Promise<any>}\n     */\n  public static broadcastTransaction(\n    transaction: any,\n    privateKey: string,\n    publicKey: string\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.setTransactionFees(transaction)\n        .then(() => {\n          transaction.add_signer(privateKey, publicKey)\n          transaction\n            .broadcast()\n            .then(() => {\n              resolve()\n            })\n            .catch((err: any) => {\n              reject(err)\n            })\n        })\n        .catch(err => {\n          reject(err)\n        })\n    })\n  }\n\n  /**\n     * Set transaction fee required for transaction operation\n     * @param transaction TransactionBuilder instance\n     * @return {Promise<any>}\n     */\n  private static setTransactionFees(transaction: any): Promise<any> {\n    return new Promise((resolve, reject) => {\n      transaction\n        .set_required_fees()\n        .then(() => {\n          resolve()\n        })\n        .catch(() => {\n          // TODO: error handling\n          reject()\n        })\n    })\n  }\n}\n","import { DatabaseApi, DatabaseOperation } from './api/database'\nimport { ChainApi, ChainMethods } from './api/chain'\nimport {\n  BuyContentOperation,\n  ContentCancelOperation,\n  KeyParts,\n  SubmitContentOperation,\n  TransactionOperationName,\n  TransactionOperator\n} from './transactionOperator'\n\nconst moment = require('moment')\n\nexport interface SubmitObject {\n  authorId: string\n  seeders: Array<any>\n  fileName: string\n  fileContent: Buffer\n  date: string\n  fileSize: number\n  price: number\n  size: number\n  URI: string\n  hash: string\n  keyParts: KeyParts[]\n  synopsis: Synopsis\n}\n\nexport interface Content {\n  id: string\n  author: string\n  price: Price\n  synopsis: Synopsis\n  status: Status\n  URI: string\n  _hash: string\n  AVG_rating: number\n  size: number\n  expiration: string\n  created: string\n  times_bought: number\n}\n\nexport interface Synopsis {\n  title: string\n  description: string\n  content_type_id: string\n  file_name: string\n  language: string\n  sampleURL: string\n  fileFormat: string\n  length: string\n  content_licence: string\n  thumbnail: string\n  userRights: string\n}\n\nexport class ContentType {\n  private _appId: number\n  private _category: number\n  private _subCategory: number\n  private _isInappropriate: boolean\n\n  constructor(\n    appId: number,\n    category: number,\n    subCategory: number,\n    isInappropriate: boolean\n  ) {\n    this._appId = appId\n    this._category = category\n    this._subCategory = subCategory\n    this._isInappropriate = isInappropriate\n  }\n\n  public getId(): string {\n    return `${this._appId}.${this._category}.${this._subCategory}.${this\n      ._isInappropriate}`\n  }\n}\n\nexport interface Price {\n  amount: number\n  asset_id: string\n}\n\nexport class Status {\n  static Uploaded = 'Uploaded'\n  static Partially_uploaded = 'Partially uploaded'\n  static Uploading = 'Uploading'\n  static Expired = 'Expired'\n}\n\nexport class SearchParamsOrder {\n  static authorAsc = '+author'\n  static ratingAsc = '+rating'\n  static sizeAsc = '+size'\n  static priceAsc = '+price'\n  static createdAsc = '+created'\n  static expirationAsc = '+expiration'\n  static authorDesc = '-author'\n  static ratingDesc = '-rating'\n  static sizeDesc = '-size'\n  static priceDesc = '-price'\n  static createdDesc = '-created'\n  static expirationDesc = '-expiration'\n}\n\n/**\n * Parameters for content search.\n * Order parameter options can be found in SearchParamsOrder class\n * Region code is ISO 3166-1 alpha-2 two-letter region code.\n */\nexport class SearchParams {\n  term = ''\n  order = ''\n  user = ''\n  region_code = ''\n  itemId = ''\n  category = ''\n  count: number\n\n  constructor(\n    term = '',\n    order = '',\n    user = '',\n    region_code = '',\n    itemId = '',\n    category: string,\n    count: number = 6\n  ) {\n    this.term = term || ''\n    this.order = order || ''\n    this.user = user || ''\n    this.region_code = region_code || ''\n    this.itemId = itemId || '0.0.0'\n    this.category = category || '1'\n    this.count = count || 6\n  }\n\n  get params(): any[] {\n    let params: any[] = []\n    params = Object.values(this).reduce((previousValue, currentValue) => {\n      previousValue.push(currentValue)\n      return previousValue\n    }, params)\n    return params\n  }\n}\n\n/**\n * ContentApi provide methods to communication\n * with content stored in decent network.\n */\nexport class ContentApi {\n  private _dbApi: DatabaseApi\n  private _chainApi: ChainApi\n\n  constructor(dbApi: DatabaseApi, chainApi: ChainApi) {\n    this._dbApi = dbApi\n    this._chainApi = chainApi\n  }\n\n  public searchContent(searchParams: SearchParams): Promise<Content[]> {\n    return new Promise((resolve, reject) => {\n      this._dbApi\n        .execute(DatabaseOperation.searchContent, searchParams.params)\n        .then((content: any) => {\n          resolve(content)\n        })\n        .catch((err: any) => {\n          reject(err)\n        })\n    })\n  }\n\n  public getContent(id: string): Promise<Content> {\n    return new Promise((resolve, reject) => {\n      const chainOps = new ChainMethods()\n      chainOps.add(ChainMethods.getObject, id)\n      this._chainApi\n        .fetch(chainOps)\n        .then((response: any[]) => {\n          const [content] = response\n          const stringidied = JSON.stringify(content)\n          const objectified = JSON.parse(stringidied)\n          resolve(objectified as Content)\n        })\n        .catch(err => {\n          reject(err)\n        })\n    })\n  }\n\n  /**\n     * Cancel submitted content record from blockchain.\n     *\n     * @param {string} URI example: 'ipfs:abc78b7a9b7a98b7c98cb798c7b9a8bc9a87bc98a9bc'\n     * @param {string} authorId example: '1.2.532'\n     * @param {string} privateKey\n     * @return {Promise<any>}\n     */\n  public removeContent(\n    URI: string,\n    authorId: string,\n    privateKey: string\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      const methods = new ChainMethods()\n      methods.add(ChainMethods.getAccount, authorId)\n\n      this._chainApi.fetch(methods).then(result => {\n        const [account] = result\n        const publicKey = account\n          .get('owner')\n          .get('key_auths')\n          .get(0)\n          .get(0)\n        const transaction = TransactionOperator.createTransaction()\n        const cancellation: ContentCancelOperation = {\n          author: authorId,\n          URI: URI\n        }\n        TransactionOperator.addOperation(\n          {\n            name: TransactionOperationName.content_cancellation,\n            operation: cancellation\n          },\n          transaction\n        )\n        TransactionOperator.broadcastTransaction(\n          transaction,\n          privateKey,\n          publicKey\n        )\n          .then(() => {\n            resolve()\n          })\n          .catch(() => {\n            reject()\n          })\n      })\n    })\n  }\n\n  /**\n     * Restores key to decrypt downloaded content.\n     *\n     * ElGammalPrivate key is used to identify if user have bought content.\n     *\n     * @param {String} contentId example: '1.2.453'\n     * @param {string} elGammalPrivate\n     * @return {Promise<string>} Key to decrypt content\n     */\n  public restoreContentKeys(\n    contentId: String,\n    elGammalPrivate: string\n  ): Promise<string> {\n    return new Promise((resolve, reject) => {\n      this._dbApi\n        .execute(DatabaseOperation.restoreEncryptionKey, [\n          { s: elGammalPrivate },\n          contentId\n        ])\n        .then(key => {\n          resolve(key)\n        })\n        .catch(err => {\n          reject(err)\n        })\n    })\n  }\n\n  /**\n     * Obtains content key with key parts of each seeder to encrypt\n     * content to be uploaded.\n     *\n     * @param {string[]} seeders Array of seeders ids example: ['1.2.12', '1.4.13']\n     * @return {Promise<any>}\n     */\n  public generateContentKeys(seeders: string[]): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this._dbApi\n        .execute(DatabaseOperation.generateContentKeys, [seeders])\n        .then(keys => {\n          resolve(keys)\n        })\n        .catch(err => {\n          reject(err)\n        })\n    })\n  }\n\n  /**\n     * Submit content to blockchain\n     * Need to supply control checksum 'ripemdHash' and\n     * 'key' generated by seeders in getContentKeys\n     *\n     * @param {SubmitObject} content\n     * @param {string} privateKey\n     * @param {string} publicKey\n     * @return {Promise<any>}\n     */\n  public addContent(\n    content: SubmitObject,\n    privateKey: string,\n    publicKey: string\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      content.size = this.getFileSize(content.size)\n      const submitOperation: SubmitContentOperation = {\n        size: content.size,\n        author: content.authorId,\n        co_authors: [],\n        URI: content.URI,\n        quorum: content.seeders.length,\n        price: [\n          {\n            region: 1,\n            price: {\n              amount: content.price,\n              asset_id: ChainApi.asset_id\n            }\n          }\n        ],\n        hash: content.hash,\n        seeders: content.seeders.map(s => s.seeder),\n        key_parts: content.keyParts,\n        expiration: content.date,\n        publishing_fee: {\n          amount: this.calculateFee(content),\n          asset_id: ChainApi.asset_id\n        },\n        synopsis: JSON.stringify(content.synopsis)\n      }\n      const transaction = TransactionOperator.createTransaction()\n      TransactionOperator.addOperation(\n        {\n          name: TransactionOperationName.content_submit,\n          operation: submitOperation\n        },\n        transaction\n      )\n\n      TransactionOperator.broadcastTransaction(\n        transaction,\n        privateKey,\n        publicKey\n      )\n        .then(() => {\n          resolve()\n        })\n        .catch(err => {\n          reject(err)\n        })\n    })\n  }\n\n  private getFileSize(fileSize: number): number {\n    return Math.ceil(fileSize / (1024 * 1024))\n  }\n\n  private calculateFee(content: SubmitObject): number {\n    const num_days = moment(content.date).diff(moment(), 'days') + 1\n    return Math.ceil(\n      this.getFileSize(content.fileSize) *\n        content.seeders.reduce(\n          (fee, seed) => fee + seed.price.amount * num_days,\n          0\n        )\n    )\n  }\n\n  /**\n     * Request buy content.\n     *\n     * @param {string} contentId Id of content to be bought, example: '1.2.123'\n     * @param {string} buyerId Account id of user buying content, example: '1.2.123'\n     * @param {string} elGammalPub ElGammal public key which will be used to identify users bought content\n     * @param {string} privateKey\n     * @param {string} pubKey\n     * @return {Promise<any>}\n     */\n  public buyContent(\n    contentId: string,\n    buyerId: string,\n    elGammalPub: string,\n    privateKey: string,\n    pubKey: string\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.getContent(contentId)\n        .then((content: Content) => {\n          const transaction = TransactionOperator.createTransaction()\n          const buyOperation: BuyContentOperation = {\n            URI: content.URI,\n            consumer: buyerId,\n            price: content.price,\n            region_code_from: 1,\n            pubKey: { s: elGammalPub }\n          }\n          TransactionOperator.addOperation(\n            {\n              name: TransactionOperationName.requestToBuy,\n              operation: buyOperation\n            },\n            transaction\n          )\n          TransactionOperator.broadcastTransaction(\n            transaction,\n            privateKey,\n            pubKey\n          )\n            .then(() => {\n              resolve()\n            })\n            .catch(err => {\n              reject()\n            })\n        })\n        .catch(err => {\n          reject(err)\n        })\n    })\n  }\n}\n","declare let global: any;\n\n/**\n * @license\n * Copyright Google Inc. All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\ndeclare var WorkerGlobalScope: any;\n// CommonJS / Node have global context exposed as \"global\" variable.\n// We don't want to include the whole node.d.ts this this compilation unit so we'll just fake\n// the global \"global\" var for now.\n\nconst __window = typeof window !== 'undefined' && window;\nconst __self = typeof self !== 'undefined' && typeof WorkerGlobalScope !== 'undefined' &&\n    self instanceof WorkerGlobalScope && self;\nconst __global = typeof global !== 'undefined' && global;\nconst _root: any = __window || __global || __self;\n\n// Workaround Closure Compiler restriction: The body of a goog.module cannot use throw.\n// This is needed when used with angular/tsickle which inserts a goog.module statement.\n// Wrap in IIFE\n(function () {\n  if (!_root) {\n    throw new Error('RxJS could not find any global context (window, self, global)');\n  }\n})();\n\nexport { _root as root };","export function isFunction(x: any): x is Function {\n  return typeof x === 'function';\n}\n","export const isArray = Array.isArray || (<T>(x: any): x is T[] => x && typeof x.length === 'number');\n","export function isObject(x: any): x is Object {\n  return x != null && typeof x === 'object';\n}\n","// typeof any so that it we don't have to cast when comparing a result to the error object\nexport const errorObject: any = { e: {} };","import { errorObject } from './errorObject';\n\nlet tryCatchTarget: Function;\n\nfunction tryCatcher(this: any): any {\n  try {\n    return tryCatchTarget.apply(this, arguments);\n  } catch (e) {\n    errorObject.e = e;\n    return errorObject;\n  }\n}\n\nexport function tryCatch<T extends Function>(fn: T): T {\n  tryCatchTarget = fn;\n  return <any>tryCatcher;\n};\n","/**\n * An error thrown when one or more errors have occurred during the\n * `unsubscribe` of a {@link Subscription}.\n */\nexport class UnsubscriptionError extends Error {\n  constructor(public errors: any[]) {\n    super();\n    const err: any = Error.call(this, errors ?\n      `${errors.length} errors occurred during unsubscription:\n  ${errors.map((err, i) => `${i + 1}) ${err.toString()}`).join('\\n  ')}` : '');\n    (<any> this).name = err.name = 'UnsubscriptionError';\n    (<any> this).stack = err.stack;\n    (<any> this).message = err.message;\n  }\n}\n","import { isArray } from './util/isArray';\nimport { isObject } from './util/isObject';\nimport { isFunction } from './util/isFunction';\nimport { tryCatch } from './util/tryCatch';\nimport { errorObject } from './util/errorObject';\nimport { UnsubscriptionError } from './util/UnsubscriptionError';\n\nexport interface AnonymousSubscription {\n  unsubscribe(): void;\n}\n\nexport type TeardownLogic = AnonymousSubscription | Function | void;\n\nexport interface ISubscription extends AnonymousSubscription {\n  unsubscribe(): void;\n  readonly closed: boolean;\n}\n\n/**\n * Represents a disposable resource, such as the execution of an Observable. A\n * Subscription has one important method, `unsubscribe`, that takes no argument\n * and just disposes the resource held by the subscription.\n *\n * Additionally, subscriptions may be grouped together through the `add()`\n * method, which will attach a child Subscription to the current Subscription.\n * When a Subscription is unsubscribed, all its children (and its grandchildren)\n * will be unsubscribed as well.\n *\n * @class Subscription\n */\nexport class Subscription implements ISubscription {\n  public static EMPTY: Subscription = (function(empty: any){\n    empty.closed = true;\n    return empty;\n  }(new Subscription()));\n\n  /**\n   * A flag to indicate whether this Subscription has already been unsubscribed.\n   * @type {boolean}\n   */\n  public closed: boolean = false;\n\n  protected _parent: Subscription = null;\n  protected _parents: Subscription[] = null;\n  private _subscriptions: ISubscription[] = null;\n\n  /**\n   * @param {function(): void} [unsubscribe] A function describing how to\n   * perform the disposal of resources when the `unsubscribe` method is called.\n   */\n  constructor(unsubscribe?: () => void) {\n    if (unsubscribe) {\n      (<any> this)._unsubscribe = unsubscribe;\n    }\n  }\n\n  /**\n   * Disposes the resources held by the subscription. May, for instance, cancel\n   * an ongoing Observable execution or cancel any other type of work that\n   * started when the Subscription was created.\n   * @return {void}\n   */\n  unsubscribe(): void {\n    let hasErrors = false;\n    let errors: any[];\n\n    if (this.closed) {\n      return;\n    }\n\n    let { _parent, _parents, _unsubscribe, _subscriptions } = (<any> this);\n\n    this.closed = true;\n    this._parent = null;\n    this._parents = null;\n    // null out _subscriptions first so any child subscriptions that attempt\n    // to remove themselves from this subscription will noop\n    this._subscriptions = null;\n\n    let index = -1;\n    let len = _parents ? _parents.length : 0;\n\n    // if this._parent is null, then so is this._parents, and we\n    // don't have to remove ourselves from any parent subscriptions.\n    while (_parent) {\n      _parent.remove(this);\n      // if this._parents is null or index >= len,\n      // then _parent is set to null, and the loop exits\n      _parent = ++index < len && _parents[index] || null;\n    }\n\n    if (isFunction(_unsubscribe)) {\n      let trial = tryCatch(_unsubscribe).call(this);\n      if (trial === errorObject) {\n        hasErrors = true;\n        errors = errors || (\n          errorObject.e instanceof UnsubscriptionError ?\n            flattenUnsubscriptionErrors(errorObject.e.errors) : [errorObject.e]\n        );\n      }\n    }\n\n    if (isArray(_subscriptions)) {\n\n      index = -1;\n      len = _subscriptions.length;\n\n      while (++index < len) {\n        const sub = _subscriptions[index];\n        if (isObject(sub)) {\n          let trial = tryCatch(sub.unsubscribe).call(sub);\n          if (trial === errorObject) {\n            hasErrors = true;\n            errors = errors || [];\n            let err = errorObject.e;\n            if (err instanceof UnsubscriptionError) {\n              errors = errors.concat(flattenUnsubscriptionErrors(err.errors));\n            } else {\n              errors.push(err);\n            }\n          }\n        }\n      }\n    }\n\n    if (hasErrors) {\n      throw new UnsubscriptionError(errors);\n    }\n  }\n\n  /**\n   * Adds a tear down to be called during the unsubscribe() of this\n   * Subscription.\n   *\n   * If the tear down being added is a subscription that is already\n   * unsubscribed, is the same reference `add` is being called on, or is\n   * `Subscription.EMPTY`, it will not be added.\n   *\n   * If this subscription is already in an `closed` state, the passed\n   * tear down logic will be executed immediately.\n   *\n   * @param {TeardownLogic} teardown The additional logic to execute on\n   * teardown.\n   * @return {Subscription} Returns the Subscription used or created to be\n   * added to the inner subscriptions list. This Subscription can be used with\n   * `remove()` to remove the passed teardown logic from the inner subscriptions\n   * list.\n   */\n  add(teardown: TeardownLogic): Subscription {\n    if (!teardown || (teardown === Subscription.EMPTY)) {\n      return Subscription.EMPTY;\n    }\n\n    if (teardown === this) {\n      return this;\n    }\n\n    let subscription = (<Subscription> teardown);\n\n    switch (typeof teardown) {\n      case 'function':\n        subscription = new Subscription(<(() => void) > teardown);\n      case 'object':\n        if (subscription.closed || typeof subscription.unsubscribe !== 'function') {\n          return subscription;\n        } else if (this.closed) {\n          subscription.unsubscribe();\n          return subscription;\n        } else if (typeof subscription._addParent !== 'function' /* quack quack */) {\n          const tmp = subscription;\n          subscription = new Subscription();\n          subscription._subscriptions = [tmp];\n        }\n        break;\n      default:\n        throw new Error('unrecognized teardown ' + teardown + ' added to Subscription.');\n    }\n\n    const subscriptions = this._subscriptions || (this._subscriptions = []);\n\n    subscriptions.push(subscription);\n    subscription._addParent(this);\n\n    return subscription;\n  }\n\n  /**\n   * Removes a Subscription from the internal list of subscriptions that will\n   * unsubscribe during the unsubscribe process of this Subscription.\n   * @param {Subscription} subscription The subscription to remove.\n   * @return {void}\n   */\n  remove(subscription: Subscription): void {\n    const subscriptions = this._subscriptions;\n    if (subscriptions) {\n      const subscriptionIndex = subscriptions.indexOf(subscription);\n      if (subscriptionIndex !== -1) {\n        subscriptions.splice(subscriptionIndex, 1);\n      }\n    }\n  }\n\n  private _addParent(parent: Subscription) {\n    let { _parent, _parents } = this;\n    if (!_parent || _parent === parent) {\n      // If we don't have a parent, or the new parent is the same as the\n      // current parent, then set this._parent to the new parent.\n      this._parent = parent;\n    } else if (!_parents) {\n      // If there's already one parent, but not multiple, allocate an Array to\n      // store the rest of the parent Subscriptions.\n      this._parents = [parent];\n    } else if (_parents.indexOf(parent) === -1) {\n      // Only add the new parent to the _parents list if it's not already there.\n      _parents.push(parent);\n    }\n  }\n}\n\nfunction flattenUnsubscriptionErrors(errors: any[]) {\n return errors.reduce((errs, err) => errs.concat((err instanceof UnsubscriptionError) ? err.errors : err), []);\n}\n","export interface NextObserver<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error?: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface ErrorObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error: (err: any) => void;\n  complete?: () => void;\n}\n\nexport interface CompletionObserver<T> {\n  closed?: boolean;\n  next?: (value: T) => void;\n  error?: (err: any) => void;\n  complete: () => void;\n}\n\nexport type PartialObserver<T> = NextObserver<T> | ErrorObserver<T> | CompletionObserver<T>;\n\nexport interface Observer<T> {\n  closed?: boolean;\n  next: (value: T) => void;\n  error: (err: any) => void;\n  complete: () => void;\n}\n\nexport const empty: Observer<any> = {\n  closed: true,\n  next(value: any): void { /* noop */},\n  error(err: any): void { throw err; },\n  complete(): void { /*noop*/ }\n};\n","import { root } from '../util/root';\n\nconst Symbol: any = root.Symbol;\n\nexport const rxSubscriber = (typeof Symbol === 'function' && typeof Symbol.for === 'function') ?\n  Symbol.for('rxSubscriber') : '@@rxSubscriber';\n\n/**\n * @deprecated use rxSubscriber instead\n */\nexport const $$rxSubscriber = rxSubscriber;\n","import { isFunction } from './util/isFunction';\nimport { Observer, PartialObserver } from './Observer';\nimport { Subscription } from './Subscription';\nimport { empty as emptyObserver } from './Observer';\nimport { rxSubscriber as rxSubscriberSymbol } from './symbol/rxSubscriber';\n\n/**\n * Implements the {@link Observer} interface and extends the\n * {@link Subscription} class. While the {@link Observer} is the public API for\n * consuming the values of an {@link Observable}, all Observers get converted to\n * a Subscriber, in order to provide Subscription-like capabilities such as\n * `unsubscribe`. Subscriber is a common type in RxJS, and crucial for\n * implementing operators, but it is rarely used as a public API.\n *\n * @class Subscriber<T>\n */\nexport class Subscriber<T> extends Subscription implements Observer<T> {\n\n  [rxSubscriberSymbol]() { return this; }\n\n  /**\n   * A static factory for a Subscriber, given a (potentially partial) definition\n   * of an Observer.\n   * @param {function(x: ?T): void} [next] The `next` callback of an Observer.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   * @return {Subscriber<T>} A Subscriber wrapping the (partially defined)\n   * Observer represented by the given arguments.\n   */\n  static create<T>(next?: (x?: T) => void,\n                   error?: (e?: any) => void,\n                   complete?: () => void): Subscriber<T> {\n    const subscriber = new Subscriber(next, error, complete);\n    subscriber.syncErrorThrowable = false;\n    return subscriber;\n  }\n\n  public syncErrorValue: any = null;\n  public syncErrorThrown: boolean = false;\n  public syncErrorThrowable: boolean = false;\n\n  protected isStopped: boolean = false;\n  protected destination: PartialObserver<any>; // this `any` is the escape hatch to erase extra type param (e.g. R)\n\n  /**\n   * @param {Observer|function(value: T): void} [destinationOrNext] A partially\n   * defined Observer or a `next` callback function.\n   * @param {function(e: ?any): void} [error] The `error` callback of an\n   * Observer.\n   * @param {function(): void} [complete] The `complete` callback of an\n   * Observer.\n   */\n  constructor(destinationOrNext?: PartialObserver<any> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    switch (arguments.length) {\n      case 0:\n        this.destination = emptyObserver;\n        break;\n      case 1:\n        if (!destinationOrNext) {\n          this.destination = emptyObserver;\n          break;\n        }\n        if (typeof destinationOrNext === 'object') {\n          if (destinationOrNext instanceof Subscriber) {\n            this.destination = (<Subscriber<any>> destinationOrNext);\n            (<any> this.destination).add(this);\n          } else {\n            this.syncErrorThrowable = true;\n            this.destination = new SafeSubscriber<T>(this, <PartialObserver<any>> destinationOrNext);\n          }\n          break;\n        }\n      default:\n        this.syncErrorThrowable = true;\n        this.destination = new SafeSubscriber<T>(this, <((value: T) => void)> destinationOrNext, error, complete);\n        break;\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `next` from\n   * the Observable, with a value. The Observable may call this method 0 or more\n   * times.\n   * @param {T} [value] The `next` value.\n   * @return {void}\n   */\n  next(value?: T): void {\n    if (!this.isStopped) {\n      this._next(value);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive notifications of type `error` from\n   * the Observable, with an attached {@link Error}. Notifies the Observer that\n   * the Observable has experienced an error condition.\n   * @param {any} [err] The `error` exception.\n   * @return {void}\n   */\n  error(err?: any): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._error(err);\n    }\n  }\n\n  /**\n   * The {@link Observer} callback to receive a valueless notification of type\n   * `complete` from the Observable. Notifies the Observer that the Observable\n   * has finished sending push-based notifications.\n   * @return {void}\n   */\n  complete(): void {\n    if (!this.isStopped) {\n      this.isStopped = true;\n      this._complete();\n    }\n  }\n\n  unsubscribe(): void {\n    if (this.closed) {\n      return;\n    }\n    this.isStopped = true;\n    super.unsubscribe();\n  }\n\n  protected _next(value: T): void {\n    this.destination.next(value);\n  }\n\n  protected _error(err: any): void {\n    this.destination.error(err);\n    this.unsubscribe();\n  }\n\n  protected _complete(): void {\n    this.destination.complete();\n    this.unsubscribe();\n  }\n\n  protected _unsubscribeAndRecycle(): Subscriber<T> {\n    const { _parent, _parents } = this;\n    this._parent = null;\n    this._parents = null;\n    this.unsubscribe();\n    this.closed = false;\n    this.isStopped = false;\n    this._parent = _parent;\n    this._parents = _parents;\n    return this;\n  }\n}\n\n/**\n * We need this JSDoc comment for affecting ESDoc.\n * @ignore\n * @extends {Ignored}\n */\nclass SafeSubscriber<T> extends Subscriber<T> {\n\n  private _context: any;\n\n  constructor(private _parentSubscriber: Subscriber<T>,\n              observerOrNext?: PartialObserver<T> | ((value: T) => void),\n              error?: (e?: any) => void,\n              complete?: () => void) {\n    super();\n\n    let next: ((value: T) => void);\n    let context: any = this;\n\n    if (isFunction(observerOrNext)) {\n      next = (<((value: T) => void)> observerOrNext);\n    } else if (observerOrNext) {\n      next = (<PartialObserver<T>> observerOrNext).next;\n      error = (<PartialObserver<T>> observerOrNext).error;\n      complete = (<PartialObserver<T>> observerOrNext).complete;\n      if (observerOrNext !== emptyObserver) {\n        context = Object.create(observerOrNext);\n        if (isFunction(context.unsubscribe)) {\n          this.add(<() => void> context.unsubscribe.bind(context));\n        }\n        context.unsubscribe = this.unsubscribe.bind(this);\n      }\n    }\n\n    this._context = context;\n    this._next = next;\n    this._error = error;\n    this._complete = complete;\n  }\n\n  next(value?: T): void {\n    if (!this.isStopped && this._next) {\n      const { _parentSubscriber } = this;\n      if (!_parentSubscriber.syncErrorThrowable) {\n        this.__tryOrUnsub(this._next, value);\n      } else if (this.__tryOrSetError(_parentSubscriber, this._next, value)) {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  error(err?: any): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._error) {\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(this._error, err);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, this._error, err);\n          this.unsubscribe();\n        }\n      } else if (!_parentSubscriber.syncErrorThrowable) {\n        this.unsubscribe();\n        throw err;\n      } else {\n        _parentSubscriber.syncErrorValue = err;\n        _parentSubscriber.syncErrorThrown = true;\n        this.unsubscribe();\n      }\n    }\n  }\n\n  complete(): void {\n    if (!this.isStopped) {\n      const { _parentSubscriber } = this;\n      if (this._complete) {\n        const wrappedComplete = () => this._complete.call(this._context);\n\n        if (!_parentSubscriber.syncErrorThrowable) {\n          this.__tryOrUnsub(wrappedComplete);\n          this.unsubscribe();\n        } else {\n          this.__tryOrSetError(_parentSubscriber, wrappedComplete);\n          this.unsubscribe();\n        }\n      } else {\n        this.unsubscribe();\n      }\n    }\n  }\n\n  private __tryOrUnsub(fn: Function, value?: any): void {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      this.unsubscribe();\n      throw err;\n    }\n  }\n\n  private __tryOrSetError(parent: Subscriber<T>, fn: Function, value?: any): boolean {\n    try {\n      fn.call(this._context, value);\n    } catch (err) {\n      parent.syncErrorValue = err;\n      parent.syncErrorThrown = true;\n      return true;\n    }\n    return false;\n  }\n\n  protected _unsubscribe(): void {\n    const { _parentSubscriber } = this;\n    this._context = null;\n    this._parentSubscriber = null;\n    _parentSubscriber.unsubscribe();\n  }\n}\n","import { Subscriber } from '../Subscriber';\nimport { rxSubscriber as rxSubscriberSymbol } from '../symbol/rxSubscriber';\nimport { PartialObserver, empty as emptyObserver } from '../Observer';\n\nexport function toSubscriber<T>(\n  nextOrObserver?: PartialObserver<T> | ((value: T) => void),\n  error?: (error: any) => void,\n  complete?: () => void): Subscriber<T> {\n\n  if (nextOrObserver) {\n    if (nextOrObserver instanceof Subscriber) {\n      return (<Subscriber<T>> nextOrObserver);\n    }\n\n    if (nextOrObserver[rxSubscriberSymbol]) {\n      return nextOrObserver[rxSubscriberSymbol]();\n    }\n  }\n\n  if (!nextOrObserver && !error && !complete) {\n    return new Subscriber(emptyObserver);\n  }\n\n  return new Subscriber(nextOrObserver, error, complete);\n}\n","import { root } from '../util/root';\n\nexport function getSymbolObservable(context: any) {\n  let $$observable: any;\n  let Symbol = context.Symbol;\n\n  if (typeof Symbol === 'function') {\n    if (Symbol.observable) {\n      $$observable = Symbol.observable;\n    } else {\n        $$observable = Symbol('observable');\n        Symbol.observable = $$observable;\n    }\n  } else {\n    $$observable = '@@observable';\n  }\n\n  return $$observable;\n}\n\nexport const observable = getSymbolObservable(root);\n\n/**\n * @deprecated use observable instead\n */\nexport const $$observable = observable;\n","/* tslint:disable:no-empty */\nexport function noop() { }\n","import { noop } from './noop';\nimport { UnaryFunction } from '../interfaces';\n\n/* tslint:disable:max-line-length */\nexport function pipe<T>(): UnaryFunction<T, T>;\nexport function pipe<T, A>(op1: UnaryFunction<T, A>): UnaryFunction<T, A>;\nexport function pipe<T, A, B>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>): UnaryFunction<T, B>;\nexport function pipe<T, A, B, C>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>): UnaryFunction<T, C>;\nexport function pipe<T, A, B, C, D>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>): UnaryFunction<T, D>;\nexport function pipe<T, A, B, C, D, E>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>): UnaryFunction<T, E>;\nexport function pipe<T, A, B, C, D, E, F>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>): UnaryFunction<T, F>;\nexport function pipe<T, A, B, C, D, E, F, G>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>): UnaryFunction<T, G>;\nexport function pipe<T, A, B, C, D, E, F, G, H>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>): UnaryFunction<T, H>;\nexport function pipe<T, A, B, C, D, E, F, G, H, I>(op1: UnaryFunction<T, A>, op2: UnaryFunction<A, B>, op3: UnaryFunction<B, C>, op4: UnaryFunction<C, D>, op5: UnaryFunction<D, E>, op6: UnaryFunction<E, F>, op7: UnaryFunction<F, G>, op8: UnaryFunction<G, H>, op9: UnaryFunction<H, I>): UnaryFunction<T, I>;\n/* tslint:enable:max-line-length */\n\nexport function pipe<T, R>(...fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  return pipeFromArray(fns);\n}\n\n/* @internal */\nexport function pipeFromArray<T, R>(fns: Array<UnaryFunction<T, R>>): UnaryFunction<T, R> {\n  if (!fns) {\n    return noop as UnaryFunction<any, any>;\n  }\n\n  if (fns.length === 1) {\n    return fns[0];\n  }\n\n  return function piped(input: T): R {\n    return fns.reduce((prev: any, fn: UnaryFunction<T, R>) => fn(prev), input);\n  };\n}\n","import { PartialObserver } from './Observer';\nimport { Operator } from './Operator';\nimport { Subscriber } from './Subscriber';\nimport { Subscription, AnonymousSubscription, TeardownLogic } from './Subscription';\nimport { root } from './util/root';\nimport { toSubscriber } from './util/toSubscriber';\nimport { IfObservable } from './observable/IfObservable';\nimport { ErrorObservable } from './observable/ErrorObservable';\nimport { observable as Symbol_observable } from './symbol/observable';\nimport { OperatorFunction } from './interfaces';\nimport { pipeFromArray } from './util/pipe';\n\nexport interface Subscribable<T> {\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): AnonymousSubscription;\n}\n\nexport type SubscribableOrPromise<T> = Subscribable<T> | PromiseLike<T>;\nexport type ObservableInput<T> = SubscribableOrPromise<T> | ArrayLike<T>;\n\n/**\n * A representation of any set of values over any amount of time. This is the most basic building block\n * of RxJS.\n *\n * @class Observable<T>\n */\nexport class Observable<T> implements Subscribable<T> {\n\n  public _isScalar: boolean = false;\n\n  protected source: Observable<any>;\n  protected operator: Operator<any, T>;\n\n  /**\n   * @constructor\n   * @param {Function} subscribe the function that is called when the Observable is\n   * initially subscribed to. This function is given a Subscriber, to which new values\n   * can be `next`ed, or an `error` method can be called to raise an error, or\n   * `complete` can be called to notify of a successful completion.\n   */\n  constructor(subscribe?: (this: Observable<T>, subscriber: Subscriber<T>) => TeardownLogic) {\n    if (subscribe) {\n      this._subscribe = subscribe;\n    }\n  }\n\n  // HACK: Since TypeScript inherits static properties too, we have to\n  // fight against TypeScript here so Subject can have a different static create signature\n  /**\n   * Creates a new cold Observable by calling the Observable constructor\n   * @static true\n   * @owner Observable\n   * @method create\n   * @param {Function} subscribe? the subscriber function to be passed to the Observable constructor\n   * @return {Observable} a new cold observable\n   */\n  static create: Function = <T>(subscribe?: (subscriber: Subscriber<T>) => TeardownLogic) => {\n    return new Observable<T>(subscribe);\n  }\n\n  /**\n   * Creates a new Observable, with this Observable as the source, and the passed\n   * operator defined as the new observable's operator.\n   * @method lift\n   * @param {Operator} operator the operator defining the operation to take on the observable\n   * @return {Observable} a new observable with the Operator applied\n   */\n  lift<R>(operator: Operator<T, R>): Observable<R> {\n    const observable = new Observable<R>();\n    observable.source = this;\n    observable.operator = operator;\n    return observable;\n  }\n\n  subscribe(): Subscription;\n  subscribe(observer: PartialObserver<T>): Subscription;\n  subscribe(next?: (value: T) => void, error?: (error: any) => void, complete?: () => void): Subscription;\n  /**\n   * Invokes an execution of an Observable and registers Observer handlers for notifications it will emit.\n   *\n   * <span class=\"informal\">Use it when you have all these Observables, but still nothing is happening.</span>\n   *\n   * `subscribe` is not a regular operator, but a method that calls Observable's internal `subscribe` function. It\n   * might be for example a function that you passed to a {@link create} static factory, but most of the time it is\n   * a library implementation, which defines what and when will be emitted by an Observable. This means that calling\n   * `subscribe` is actually the moment when Observable starts its work, not when it is created, as it is often\n   * thought.\n   *\n   * Apart from starting the execution of an Observable, this method allows you to listen for values\n   * that an Observable emits, as well as for when it completes or errors. You can achieve this in two\n   * following ways.\n   *\n   * The first way is creating an object that implements {@link Observer} interface. It should have methods\n   * defined by that interface, but note that it should be just a regular JavaScript object, which you can create\n   * yourself in any way you want (ES6 class, classic function constructor, object literal etc.). In particular do\n   * not attempt to use any RxJS implementation details to create Observers - you don't need them. Remember also\n   * that your object does not have to implement all methods. If you find yourself creating a method that doesn't\n   * do anything, you can simply omit it. Note however, that if `error` method is not provided, all errors will\n   * be left uncaught.\n   *\n   * The second way is to give up on Observer object altogether and simply provide callback functions in place of its methods.\n   * This means you can provide three functions as arguments to `subscribe`, where first function is equivalent\n   * of a `next` method, second of an `error` method and third of a `complete` method. Just as in case of Observer,\n   * if you do not need to listen for something, you can omit a function, preferably by passing `undefined` or `null`,\n   * since `subscribe` recognizes these functions by where they were placed in function call. When it comes\n   * to `error` function, just as before, if not provided, errors emitted by an Observable will be thrown.\n   *\n   * Whatever style of calling `subscribe` you use, in both cases it returns a Subscription object.\n   * This object allows you to call `unsubscribe` on it, which in turn will stop work that an Observable does and will clean\n   * up all resources that an Observable used. Note that cancelling a subscription will not call `complete` callback\n   * provided to `subscribe` function, which is reserved for a regular completion signal that comes from an Observable.\n   *\n   * Remember that callbacks provided to `subscribe` are not guaranteed to be called asynchronously.\n   * It is an Observable itself that decides when these functions will be called. For example {@link of}\n   * by default emits all its values synchronously. Always check documentation for how given Observable\n   * will behave when subscribed and if its default behavior can be modified with a {@link Scheduler}.\n   *\n   * @example <caption>Subscribe with an Observer</caption>\n   * const sumObserver = {\n   *   sum: 0,\n   *   next(value) {\n   *     console.log('Adding: ' + value);\n   *     this.sum = this.sum + value;\n   *   },\n   *   error() { // We actually could just remove this method,\n   *   },        // since we do not really care about errors right now.\n   *   complete() {\n   *     console.log('Sum equals: ' + this.sum);\n   *   }\n   * };\n   *\n   * Rx.Observable.of(1, 2, 3) // Synchronously emits 1, 2, 3 and then completes.\n   * .subscribe(sumObserver);\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Subscribe with functions</caption>\n   * let sum = 0;\n   *\n   * Rx.Observable.of(1, 2, 3)\n   * .subscribe(\n   *   function(value) {\n   *     console.log('Adding: ' + value);\n   *     sum = sum + value;\n   *   },\n   *   undefined,\n   *   function() {\n   *     console.log('Sum equals: ' + sum);\n   *   }\n   * );\n   *\n   * // Logs:\n   * // \"Adding: 1\"\n   * // \"Adding: 2\"\n   * // \"Adding: 3\"\n   * // \"Sum equals: 6\"\n   *\n   *\n   * @example <caption>Cancel a subscription</caption>\n   * const subscription = Rx.Observable.interval(1000).subscribe(\n   *   num => console.log(num),\n   *   undefined,\n   *   () => console.log('completed!') // Will not be called, even\n   * );                                // when cancelling subscription\n   *\n   *\n   * setTimeout(() => {\n   *   subscription.unsubscribe();\n   *   console.log('unsubscribed!');\n   * }, 2500);\n   *\n   * // Logs:\n   * // 0 after 1s\n   * // 1 after 2s\n   * // \"unsubscribed!\" after 2.5s\n   *\n   *\n   * @param {Observer|Function} observerOrNext (optional) Either an observer with methods to be called,\n   *  or the first of three possible handlers, which is the handler for each value emitted from the subscribed\n   *  Observable.\n   * @param {Function} error (optional) A handler for a terminal event resulting from an error. If no error handler is provided,\n   *  the error will be thrown as unhandled.\n   * @param {Function} complete (optional) A handler for a terminal event resulting from successful completion.\n   * @return {ISubscription} a subscription reference to the registered handlers\n   * @method subscribe\n   */\n  subscribe(observerOrNext?: PartialObserver<T> | ((value: T) => void),\n            error?: (error: any) => void,\n            complete?: () => void): Subscription {\n\n    const { operator } = this;\n    const sink = toSubscriber(observerOrNext, error, complete);\n\n    if (operator) {\n      operator.call(sink, this.source);\n    } else {\n      sink.add(this.source ? this._subscribe(sink) : this._trySubscribe(sink));\n    }\n\n    if (sink.syncErrorThrowable) {\n      sink.syncErrorThrowable = false;\n      if (sink.syncErrorThrown) {\n        throw sink.syncErrorValue;\n      }\n    }\n\n    return sink;\n  }\n\n  protected _trySubscribe(sink: Subscriber<T>): TeardownLogic {\n    try {\n      return this._subscribe(sink);\n    } catch (err) {\n      sink.syncErrorThrown = true;\n      sink.syncErrorValue = err;\n      sink.error(err);\n    }\n  }\n\n  /**\n   * @method forEach\n   * @param {Function} next a handler for each value emitted by the observable\n   * @param {PromiseConstructor} [PromiseCtor] a constructor function used to instantiate the Promise\n   * @return {Promise} a promise that either resolves on observable completion or\n   *  rejects with the handled error\n   */\n  forEach(next: (value: T) => void, PromiseCtor?: typeof Promise): Promise<void> {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor<void>((resolve, reject) => {\n      // Must be declared in a separate statement to avoid a RefernceError when\n      // accessing subscription below in the closure due to Temporal Dead Zone.\n      let subscription: Subscription;\n      subscription = this.subscribe((value) => {\n        if (subscription) {\n          // if there is a subscription, then we can surmise\n          // the next handling is asynchronous. Any errors thrown\n          // need to be rejected explicitly and unsubscribe must be\n          // called manually\n          try {\n            next(value);\n          } catch (err) {\n            reject(err);\n            subscription.unsubscribe();\n          }\n        } else {\n          // if there is NO subscription, then we're getting a nexted\n          // value synchronously during subscription. We can just call it.\n          // If it errors, Observable's `subscribe` will ensure the\n          // unsubscription logic is called, then synchronously rethrow the error.\n          // After that, Promise will trap the error and send it\n          // down the rejection path.\n          next(value);\n        }\n      }, reject, resolve);\n    });\n  }\n\n  protected _subscribe(subscriber: Subscriber<any>): TeardownLogic {\n    return this.source.subscribe(subscriber);\n  }\n\n  // `if` and `throw` are special snow flakes, the compiler sees them as reserved words\n  static if: typeof IfObservable.create;\n  static throw: typeof ErrorObservable.create;\n\n  /**\n   * An interop point defined by the es7-observable spec https://github.com/zenparsing/es-observable\n   * @method Symbol.observable\n   * @return {Observable} this instance of the observable\n   */\n  [Symbol_observable]() {\n    return this;\n  }\n\n  /* tslint:disable:max-line-length */\n  pipe(): Observable<T>\n  pipe<A>(op1: OperatorFunction<T, A>): Observable<A>\n  pipe<A, B>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>): Observable<B>\n  pipe<A, B, C>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>): Observable<C>\n  pipe<A, B, C, D>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>): Observable<D>\n  pipe<A, B, C, D, E>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>): Observable<E>\n  pipe<A, B, C, D, E, F>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>): Observable<F>\n  pipe<A, B, C, D, E, F, G>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>): Observable<G>\n  pipe<A, B, C, D, E, F, G, H>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>): Observable<H>\n  pipe<A, B, C, D, E, F, G, H, I>(op1: OperatorFunction<T, A>, op2: OperatorFunction<A, B>, op3: OperatorFunction<B, C>, op4: OperatorFunction<C, D>, op5: OperatorFunction<D, E>, op6: OperatorFunction<E, F>, op7: OperatorFunction<F, G>, op8: OperatorFunction<G, H>, op9: OperatorFunction<H, I>): Observable<I>\n  /* tslint:enable:max-line-length */\n\n  /**\n   * Used to stitch together functional operators into a chain.\n   * @method pipe\n   * @return {Observable} the Observable result of all of the operators having\n   * been called in the order they were passed in.\n   *\n   * @example\n   *\n   * import { map, filter, scan } from 'rxjs/operators';\n   *\n   * Rx.Observable.interval(1000)\n   *   .pipe(\n   *     filter(x => x % 2 === 0),\n   *     map(x => x + x),\n   *     scan((acc, x) => acc + x)\n   *   )\n   *   .subscribe(x => console.log(x))\n   */\n  pipe<R>(...operations: OperatorFunction<T, R>[]): Observable<R> {\n    if (operations.length === 0) {\n      return this as any;\n    }\n\n    return pipeFromArray(operations)(this);\n  }\n\n  /* tslint:disable:max-line-length */\n  toPromise<T>(this: Observable<T>): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: typeof Promise): Promise<T>;\n  toPromise<T>(this: Observable<T>, PromiseCtor: PromiseConstructorLike): Promise<T>;\n  /* tslint:enable:max-line-length */\n\n  toPromise(PromiseCtor?: PromiseConstructorLike) {\n    if (!PromiseCtor) {\n      if (root.Rx && root.Rx.config && root.Rx.config.Promise) {\n        PromiseCtor = root.Rx.config.Promise;\n      } else if (root.Promise) {\n        PromiseCtor = root.Promise;\n      }\n    }\n\n    if (!PromiseCtor) {\n      throw new Error('no Promise impl found');\n    }\n\n    return new PromiseCtor((resolve, reject) => {\n      let value: any;\n      this.subscribe((x: T) => value = x, (err: any) => reject(err), () => resolve(value));\n    }) as Promise<T>;\n  }\n}\n","const { Aes } = require('decentjs-lib/lib')\nconst RIPEMD160 = require('ripemd160')\n\nexport class CryptoUtils {\n  /**\n     * Encrypts message with given private-pubic key pair\n     *\n     * @param {string} message\n     * @param {string} privateKey\n     * @param {string} publicKey\n     * @param {string} [nonce]\n     * @return {Buffer}\n     */\n  public static encryptWithChecksum(\n    message: string,\n    privateKey: string,\n    publicKey: string,\n    nonce: string = ''\n  ): Buffer {\n    return Aes.encrypt_with_checksum(privateKey, publicKey, nonce, message)\n  }\n\n  public static ripemdHash(fromBuffer: Buffer): string {\n    return new RIPEMD160().update(fromBuffer).digest('hex')\n  }\n}\n","import { Observable } from 'rxjs/Observable'\nimport { Database, DatabaseApi, DatabaseOperation } from './api/database'\nimport { ChainApi, ChainMethods } from './api/chain'\nimport { CryptoUtils } from './crypt'\nimport {\n  Memo,\n  TransactionOperationName,\n  TransactionOperator,\n  TransferOperation\n} from './transactionOperator'\n\nexport interface Account {\n  id: string\n  registrar: string\n  name: string\n  owner: Authority\n  active: Authority\n  options: Options\n  rights_to_publish: PublishRights\n  statistics: string\n  top_n_control_flags: number\n}\n\nexport interface PublishRights {\n  is_publishing_manager: boolean\n  publishing_rights_received: any[]\n  publishing_rights_forwarded: any[]\n}\n\nexport interface Asset {\n  amount: number\n  asset_id: string\n}\n\nexport interface Authority {\n  weight_threshold: number\n  account_auths: any[]\n  key_auths: KeyAuth[]\n}\n\nexport class KeyAuth {\n  private _key: string\n  private _value: number\n\n  constructor(key: string, value: number = 1) {\n    this._key = key\n    this._value = value\n  }\n\n  public keyAuthFormat(): any[] {\n    return [this._key, this._value]\n  }\n}\n\nexport interface Options {\n  memo_key: string\n  voting_account: string\n  num_miner: number\n  votes: any[]\n  extensions: any[]\n  allow_subscription: boolean\n  price_per_subscribe: Asset\n  subscription_period: number\n}\n\nexport class Transaction {\n  m_from_account_name: Observable<string>\n  m_to_account_name: Observable<string>\n  m_from_account: string\n  m_to_account: string\n  m_operation_type: number\n  m_transaction_amount: number\n  m_transaction_fee: number\n  m_str_description: string\n  m_timestamp: string\n  m_memo: TransactionMemo\n  m_memo_string: string\n\n  constructor(transaction: any) {\n    this.m_from_account = transaction.m_from_account\n    this.m_to_account = transaction.m_to_account\n    this.m_operation_type = transaction.m_operation_type\n    this.m_transaction_amount = transaction.m_transaction_amount\n    this.m_transaction_fee = transaction.m_transaction_fee\n    this.m_str_description = transaction.m_str_description\n    this.m_timestamp = transaction.m_timestamp\n    this.m_memo = new TransactionMemo(transaction)\n  }\n}\n\nexport class TransactionMemo {\n  valid: boolean\n  from: string\n  message: string\n  nonce: string\n  to: string\n\n  constructor(transaction: any) {\n    if (!transaction.m_transaction_encrypted_memo) {\n      this.valid = false\n    } else {\n      this.valid = true\n      this.from = transaction.m_transaction_encrypted_memo.from\n      this.message = transaction.m_transaction_encrypted_memo.message\n      this.nonce = transaction.m_transaction_encrypted_memo.nonce\n      this.to = transaction.m_transaction_encrypted_memo.to\n    }\n  }\n}\n\nexport class AccountError {\n  static account_does_not_exist = 'account_does_not_exist'\n  static account_fetch_failed = 'account_fetch_failed'\n  static transaction_history_fetch_failed = 'transaction_history_fetch_failed'\n  static transfer_missing_pkey = 'transfer_missing_pkey'\n  static transfer_sender_account_not_found = 'transfer_sender_account_not_found'\n  static transfer_receiver_account_not_found = 'transfer_receiver_account_not_found'\n}\n\n/**\n * API class provides wrapper for account information.\n */\nexport class AccountApi {\n  private _dbApi: DatabaseApi\n  private _chainApi: ChainApi\n\n  constructor(dbApi: Database, chainApi: ChainApi) {\n    this._dbApi = dbApi as DatabaseApi\n    this._chainApi = chainApi\n  }\n\n  /**\n     * Gets chain account for given Account name.\n     *\n     * @param {string} name example: \"u123456789abcdef123456789\"\n     * @return {Promise<Account>}\n     */\n  public getAccountByName(name: string): Promise<Account> {\n    return new Promise((resolve, reject) => {\n      this._dbApi\n        .execute(DatabaseOperation.getAccountByName, [name])\n        .then((account: Account) => {\n          resolve(account as Account)\n        })\n        .catch(err => {\n          reject(AccountError.account_fetch_failed)\n        })\n    })\n  }\n\n  /**\n     * Gets chain account for given Account id.\n     *\n     * @param {string} id example: \"1.2.345\"\n     * @return {Promise<Account>}\n     */\n  public getAccountById(id: string): Promise<Account> {\n    return new Promise((resolve, reject) => {\n      this._dbApi\n        .execute(DatabaseOperation.getAccounts, [[id]])\n        .then((accounts: Account[]) => {\n          if (accounts.length === 0) {\n            reject(AccountError.account_does_not_exist)\n          }\n          const [account] = accounts\n          resolve(account as Account)\n        })\n        .catch(err => {\n          reject(AccountError.account_fetch_failed)\n        })\n    })\n  }\n\n  /**\n     * Gets transaction history for given Account name.\n     *\n     * @param {string} accountName example: \"1.2.345\"\n     * @return {Promise<Transaction[]>}\n     */\n  public getTransactionHistory(accountName: string): Promise<Transaction[]> {\n    return new Promise((resolve, reject) => {\n      this.getAccountByName(accountName)\n        .then(acc => {\n          this._dbApi\n            .execute(DatabaseOperation.searchAccountHistory, [\n              acc.id,\n              '-time',\n              '0.0.0',\n              100\n            ])\n            .then(transactions => {\n              const res = transactions.map((tr: any) => {\n                const transaction = new Transaction(tr)\n                // TODO: memo decrypt\n                transaction.m_from_account_name = new Observable(observable => {\n                  this.getAccountById(transaction.m_from_account)\n                    .then(account => observable.next(account.name))\n                    .catch(err => observable.next(''))\n                })\n                transaction.m_to_account_name = new Observable(observable => {\n                  this.getAccountById(transaction.m_to_account)\n                    .then(account => observable.next(account.name))\n                    .catch(err => observable.next(''))\n                })\n                return transaction\n              })\n              resolve(res)\n            })\n            .catch(err => {\n              reject(AccountError.transaction_history_fetch_failed)\n            })\n        })\n        .catch(err => {\n          reject(AccountError.transaction_history_fetch_failed)\n        })\n    })\n  }\n\n  /**\n     * Transfers exact amount of DCT between accounts with optional\n     * message for recipient\n     *\n     * @param {number} amount\n     * @param {string} fromAccount Name or id of account\n     * @param {string} toAccount Name or id of account\n     * @param {string} [memo] Optional memo message for recipient, need to supply pKey to encrypt\n     * @param {string} [privateKey] Optional private key, Mandatory if memo is set. Used to encrypt memo\n     */\n  public transfer(\n    amount: number,\n    fromAccount: string,\n    toAccount: string,\n    memo: string,\n    privateKey: string\n  ): Promise<any> {\n    return new Promise((resolve, reject) => {\n      if (memo && !privateKey) {\n        reject(AccountError.transfer_missing_pkey)\n      }\n      const operations = new ChainMethods()\n      operations.add(ChainMethods.getAccount, fromAccount)\n      operations.add(ChainMethods.getAccount, toAccount)\n      operations.add(ChainMethods.getAsset, ChainApi.asset)\n\n      this._chainApi.fetch(operations).then(result => {\n        const [senderAccount, receiverAccount, asset] = result\n        if (!senderAccount) {\n          reject(AccountError.transfer_sender_account_not_found)\n        }\n        if (!receiverAccount) {\n          reject(AccountError.transfer_receiver_account_not_found)\n        }\n\n        const nonce: string = ChainApi.generateNonce()\n        const fromPublicKey = senderAccount\n          .get('owner')\n          .get('key_auths')\n          .get(0)\n          .get(0)\n        const toPublicKey = receiverAccount\n          .get('owner')\n          .get('key_auths')\n          .get(0)\n          .get(0)\n\n        const memo_object: Memo = {\n          from: fromPublicKey,\n          to: toPublicKey,\n          nonce: nonce,\n          message: CryptoUtils.encryptWithChecksum(\n            memo,\n            privateKey,\n            toPublicKey,\n            nonce\n          )\n        }\n\n        const tr = TransactionOperator.createTransaction()\n        const transfer: TransferOperation = {\n          from: senderAccount.get('id'),\n          to: receiverAccount.get('id'),\n          amount: TransactionOperator.createAsset(amount, asset.get('id')),\n          memo: memo_object\n        }\n\n        TransactionOperator.addOperation(\n          { name: TransactionOperationName.transfer, operation: transfer },\n          tr\n        )\n        TransactionOperator.broadcastTransaction(tr, privateKey, fromPublicKey)\n          .then(() => {\n            resolve()\n          })\n          .catch(() => {\n            reject()\n          })\n      })\n    })\n  }\n\n  /**\n     * Current account balance of DCT asset on given account\n     *\n     * @param {string} account Account name or id\n     * @return {Promise<number>}\n     */\n  public getBalance(account: string): Promise<number> {\n    return new Promise((resolve, reject) => {\n      const methods = new ChainMethods()\n      methods.add(ChainMethods.getAccount, account)\n\n      this._chainApi\n        .fetch(methods)\n        .then(result => {\n          const [account] = result\n          const accId = account.get('id')\n          this._dbApi\n            .execute(DatabaseOperation.getAccountBalances, [\n              accId,\n              [ChainApi.asset_id]\n            ])\n            .then(res => {\n              resolve(res[0].amount)\n            })\n            .catch(err => {\n              reject(err)\n            })\n        })\n        .catch(() => {\n          reject()\n        })\n    })\n  }\n}\n","import { ContentApi } from '../content'\nimport { DatabaseApi } from './database'\nimport { ChainApi } from './chain'\nimport { AccountApi } from '../account'\n\nconst { Apis, ChainConfig } = require('decentjs-lib/lib/ws/cjs')\nconst { ChainStore } = require('decentjs-lib/lib')\n\nexport interface CoreConfig {\n  decent_network_wspaths: string[]\n  chain_id: string\n}\n\nexport class Core {\n  private _content: ContentApi\n  private _account: AccountApi\n  private _config: CoreConfig\n  private _database: DatabaseApi\n  private _chain: ChainApi\n\n  get content(): ContentApi {\n    return this._content\n  }\n\n  get account(): AccountApi {\n    return this._account\n  }\n\n  public static create(\n    config: CoreConfig,\n    api: any = Apis,\n    chainConfigApi: any = ChainConfig\n  ): Core {\n    const core = new Core(config)\n    core.setupChain(config.chain_id, chainConfigApi)\n    core._database = DatabaseApi.create(config, api, ChainStore)\n    const apiConnectionPromise = core._database.initApi(\n      config.decent_network_wspaths,\n      api\n    )\n    core._chain = new ChainApi(apiConnectionPromise)\n    core._content = new ContentApi(core._database, core._chain)\n    core._account = new AccountApi(core._database, core._chain)\n    return core\n  }\n\n  private setupChain(chainId: string, chainConfig: any) {\n    ChainApi.setupChain(chainId, chainConfig)\n  }\n\n  private constructor(config: CoreConfig) {\n    this._config = config\n  }\n}\n","import { Core } from './api/core'\n\nexport interface DecentConfig {\n  decent_network_wspaths: string[]\n  chain_id: string\n  ipfs_server: string\n  ipfs_port: number\n}\n\nexport class Decent {\n  private static _instance: Decent\n  private _config: DecentConfig\n  private _core: Core\n\n  get core(): Core {\n    return this._core\n  }\n\n  public static instance(): Decent {\n    return this._instance || (this._instance = new Decent())\n  }\n\n  private constructor() {}\n\n  initialize(config: DecentConfig) {\n    // TODO: check validity of config\n    this._config = config\n    this._core = Core.create({\n      decent_network_wspaths: config.decent_network_wspaths,\n      chain_id: config.chain_id\n    })\n  }\n}\n","import { CryptoUtils } from './crypt'\n\nconst {\n  key,\n  PrivateKey,\n  PublicKey\n} = require('./../node_modules/decentjs-lib/lib/ecc')\n\nexport class Utils {\n  public static ripemdHash(fromBuffer: Buffer): string {\n    return CryptoUtils.ripemdHash(fromBuffer)\n  }\n\n  // public static generateKeys(fromBrainKey: string) {\n  //     const pkey = Utils.generatePrivateKey(fromBrainKey);\n  //     const pubKey = Utils.generatePublicKey(pkey);\n  //     return [pkey, pubKey];\n  // }\n  //\n  // public static getPublicKey(fromPrivateKey: string): string {\n  //     const privateKey = PrivateKey.fromWif(fromPrivateKey);\n  //     return privateKey.toPublicKey().toString();\n  // }\n  //\n  // private static generatePrivateKey(brainKey: string) {\n  //     return key.get_brainPrivateKey(brainKey);\n  // }\n  //\n  // private static generatePublicKey(privkey: any): string {\n  //     const publicKey = privkey.toPublicKey();\n  //     return publicKey.toString();\n  // }\n}\n"],"names":["_a","ChainStore","global","errorObject_1","__extends","isArray_1","root_1","Observer_1","rxSubscriber_1","observable","observable_1","Observable"],"mappings":";;;;;;;;;;AAAA,AAIA;IAAA;KAIC;IAHQ,qCAAuB,GAAG,yBAAyB,CAAA;IACnD,8BAAgB,GAAG,kBAAkB,CAAA;IACrC,uCAAyB,GAAG,2BAA2B,CAAA;IAChE,oBAAC;CAAA,IAAA;AAED;IAAA;KAQC;IAPQ,+BAAa,GAAG,gBAAgB,CAAA;IAChC,kCAAgB,GAAG,qBAAqB,CAAA;IACxC,6BAAW,GAAG,cAAc,CAAA;IAC5B,sCAAoB,GAAG,wBAAwB,CAAA;IAC/C,oCAAkB,GAAG,sBAAsB,CAAA;IAC3C,qCAAmB,GAAG,uBAAuB,CAAA;IAC7C,sCAAoB,GAAG,wBAAwB,CAAA;IACxD,wBAAC;CAAA,IAAA;AAMD;IAAA;KAEC;IAAD,eAAC;CAAA,IAAA;AAED;IAAiC,+BAAQ;IAkBvC,qBAAY,MAAsB,EAAE,GAAQ,EAAE,UAAe;QAA7D,YACE,iBAAO,SAGR;QAFC,KAAI,CAAC,OAAO,GAAG,MAAM,CAAA;QACrB,KAAI,CAAC,IAAI,GAAG,GAAG,CAAA;;KAChB;IAhBa,kBAAM,GAApB,UACE,MAAsB,EACtB,GAAQ,EACR,UAAe;QAEf,OAAO,IAAI,WAAW,CAAC,MAAM,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;KAChD;IAEO,2BAAK,GAAb;QACE,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,CAAC,MAAM,EAAE,CAAA;KACrC;IAQM,6BAAO,GAAd,UAAe,SAAmB,EAAE,MAAW;QAA/C,iBAkBC;;QAhBC,MAAM,CAAC,8BAA8B,CAAC,UAAC,MAAW;YAChD,KAAI,CAAC,iBAAiB,GAAG,MAAM,CAAA;SAChC,CAAC,CAAA;QACF,IAAI,CAAC,aAAa,GAAG,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/C,KAAI,CAAC,aAAa,CAChB,MAAM,EACN,SAAS,EACT;gBACE,OAAO,EAAE,CAAA;aACV,EACD,UAAC,KAAa;gBACZ,MAAM,CAAC,KAAK,CAAC,CAAA;aACd,CACF,CAAA;SACF,CAAC,CAAA;QACF,OAAO,IAAI,CAAC,aAAa,CAAA;KAC1B;IAEO,mCAAa,GAArB,UACE,KAAU,EACV,SAAmB,EACnB,SAAqB,EACrB,OAAgC,EAChC,YAAwB;QAL1B,iBA2BC;QAtBC,6BAAA,EAAA,gBAAwB;QAExB,IAAI,SAAS,CAAC,MAAM,IAAI,YAAY,EAAE;YACpC,OAAO,CAAC,aAAa,CAAC,uBAAuB,CAAC,CAAA;YAC9C,OAAO,KAAK,CAAA;SACb;QACD,IAAM,OAAO,GAAG,SAAS,CAAC,YAAY,CAAC,CAAA;QAEvC,OAAO,KAAK;aACT,QAAQ,CAAC,OAAO,EAAE,IAAI,CAAC;aACvB,YAAY,CAAC,IAAI,CAAC;YACjB,SAAS,EAAE,CAAA;SACZ,CAAC;aACD,KAAK,CAAC,UAAC,MAAW;YACjB,KAAI,CAAC,aAAa,CAChB,KAAK,EACL,SAAS,EACT,SAAS,EACT,OAAO,EACP,YAAY,GAAG,CAAC,CACjB,CAAA;SACF,CAAC,CAAA;KACL;IAEM,6BAAO,GAAd,UACE,SAA4B,EAC5B,UAAiB;QAFnB,iBAeC;QAXC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC;gBACtB,KAAI,CAAC,KAAK,EAAE;qBACT,IAAI,CAAC,SAAS,EAAE,UAAU,CAAC;qBAC3B,IAAI,CAAC,UAAC,OAAY,IAAK,OAAA,OAAO,CAAC,OAAO,CAAC,GAAA,CAAC;qBACxC,KAAK,CAAC,UAAC,GAAQ;;oBAEd,MAAM,CAAC,aAAa,CAAC,yBAAyB,CAAC,CAAA;iBAChD,CAAC,CAAA;aACL,CAAC,CAAA;SACH,CAAC,CAAA;KACH;IACH,kBAAC;CAAA,CAzFgC,QAAQ;;AC5BnC,IAAAA,kCAAgF;IAA/E,4BAAU;IAAE,0CAAiB;IAAEC,8BAAU,CAAuC;AAChF,AAOP;;;;AAIA;IAAA;QAKY,cAAS,GAAkB,EAAE,CAAC;KAQzC;IAPG,sBAAI,kCAAQ;aAAZ;YACI,OAAO,IAAI,CAAC,SAAS,CAAC;SACzB;;;OAAA;IAED,0BAAG,GAAH,UAAI,MAAc,EAAE,MAAW;QAC3B,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,EAAC,IAAI,EAAE,MAAM,EAAE,KAAK,EAAE,MAAM,EAAC,CAAC,CAAC;KACtD;IAXM,uBAAU,GAAG,YAAY,CAAC;IAC1B,qBAAQ,GAAG,UAAU,CAAC;IACtB,sBAAS,GAAG,WAAW,CAAC;IAUnC,mBAAC;CAAA,IAAA;AAED;IAkBI,kBAAY,YAA0B;QAClC,IAAI,CAAC,aAAa,GAAG,YAAY,CAAC;KACrC;;;;IAZa,sBAAa,GAA3B;QACI,OAAO,iBAAiB,CAAC,mBAAmB,EAAE,CAAC;KAClD;IAEa,mBAAU,GAAxB,UAAyB,OAAe,EAAE,WAAgB;QACtD,WAAW,CAAC,QAAQ,CAAC,MAAM,GAAG;YAC1B,QAAQ,EAAE,OAAO;SACpB,CAAC;KACL;;;;;;;;;;IAeM,wBAAK,GAAZ,UAAa,OAAqB;QAAlC,iBAWC;QAVG,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YAC/B,KAAI,CAAC,aAAa,CAAC,IAAI,CAAC;gBACpBA,YAAU,CAAC,IAAI,EAAE,CAAC,IAAI,CAAC;oBACnB,IAAM,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,UAAA,EAAE,IAAI,OAAA,UAAU,CAAC,EAAE,CAAC,IAAI,EAAE,EAAE,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;oBAC3E,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC;yBAChB,IAAI,CAAC,UAAC,MAAM,IAAK,OAAA,OAAO,CAAC,MAAM,CAAC,GAAA,CAAC;yBACjC,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,MAAM,CAAC,GAAG,CAAC,GAAA,CAAC,CAAC;iBAClC,CAAC,CAAC;aACN,CAAC,CAAC;SACN,CAAC,CAAC;KACN;IAzCM,cAAK,GAAG,KAAK,CAAC;IACd,iBAAQ,GAAG,OAAO,CAAC;IAyC9B,eAAC;CAAA;;ACpEK,IAAAD,kCAAyD;IAAvD,4CAAkB;IAAE,cAAG,CAAgC;;;;AAc/D;IAAA;KAKC;IAJQ,iCAAQ,GAAG,UAAU,CAAA;IACrB,6CAAoB,GAAG,sBAAsB,CAAA;IAC7C,qCAAY,GAAG,gBAAgB,CAAA;IAC/B,uCAAc,GAAG,gBAAgB,CAAA;IAC1C,+BAAC;CAAA,IAAA;AAmFD;;;;;AAKA;IAAA;KA6FC;IA1Fe,qCAAiB,GAA/B;QACE,OAAO,IAAI,kBAAkB,EAAE,CAAA;KAChC;IAEa,+BAAW,GAAzB,UAA0B,MAAc,EAAE,OAAe;QACvD,OAAO;YACL,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,mBAAmB,CAAC,QAAQ,CAAC;YACzD,QAAQ,EAAE,OAAO;SAClB,CAAA;KACF;;;;;;;;;;;;IAaa,gCAAY,GAA1B,UACE,SAA+B,EAC/B,WAAgB;QAEhB,IAAI,CAAC,GAAG,CAAC,cAAc,CAAC,SAAS,CAAC,IAAI,CAAC,EAAE;YACvC,OAAO,KAAK,CAAA;SACb;QACD,GAAG,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAC,GAAW;YAC3C,IAAI,CAAC,SAAS,CAAC,SAAS,CAAC,cAAc,CAAC,GAAG,CAAC,EAAE;gBAC5C,OAAO,KAAK,CAAA;aACb;SACF,CAAC,CAAA;QACF,WAAW,CAAC,kBAAkB,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,SAAS,CAAC,CAAA;QACnE,OAAO,IAAI,CAAA;KACZ;;;;;;;;;;;IAYa,wCAAoB,GAAlC,UACE,WAAgB,EAChB,UAAkB,EAClB,SAAiB;QAHnB,iBAsBC;QAjBC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC;iBACjC,IAAI,CAAC;gBACJ,WAAW,CAAC,UAAU,CAAC,UAAU,EAAE,SAAS,CAAC,CAAA;gBAC7C,WAAW;qBACR,SAAS,EAAE;qBACX,IAAI,CAAC;oBACJ,OAAO,EAAE,CAAA;iBACV,CAAC;qBACD,KAAK,CAAC,UAAC,GAAQ;oBACd,MAAM,CAAC,GAAG,CAAC,CAAA;iBACZ,CAAC,CAAA;aACL,CAAC;iBACD,KAAK,CAAC,UAAA,GAAG;gBACR,MAAM,CAAC,GAAG,CAAC,CAAA;aACZ,CAAC,CAAA;SACL,CAAC,CAAA;KACH;;;;;;IAOc,sCAAkB,GAAjC,UAAkC,WAAgB;QAChD,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,WAAW;iBACR,iBAAiB,EAAE;iBACnB,IAAI,CAAC;gBACJ,OAAO,EAAE,CAAA;aACV,CAAC;iBACD,KAAK,CAAC;;gBAEL,MAAM,EAAE,CAAA;aACT,CAAC,CAAA;SACL,CAAC,CAAA;KACH;IA3FM,4BAAQ,GAAG,IAAI,CAAC,GAAG,CAAC,EAAE,EAAE,CAAC,CAAC,CAAA;IA4FnC,0BAAC;CAAA;;AC/LD,IAAM,MAAM,GAAG,OAAO,CAAC,QAAQ,CAAC,CAAA;AA8ChC;IAME,qBACE,KAAa,EACb,QAAgB,EAChB,WAAmB,EACnB,eAAwB;QAExB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAA;QACnB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;QACzB,IAAI,CAAC,YAAY,GAAG,WAAW,CAAA;QAC/B,IAAI,CAAC,gBAAgB,GAAG,eAAe,CAAA;KACxC;IAEM,2BAAK,GAAZ;QACE,OAAU,IAAI,CAAC,MAAM,SAAI,IAAI,CAAC,SAAS,SAAI,IAAI,CAAC,YAAY,SAAI,IAAI;aACjE,gBAAkB,CAAA;KACtB;IACH,kBAAC;CAAA,IAAA;AAcD;IAAA;KAaC;IAZQ,2BAAS,GAAG,SAAS,CAAA;IACrB,2BAAS,GAAG,SAAS,CAAA;IACrB,yBAAO,GAAG,OAAO,CAAA;IACjB,0BAAQ,GAAG,QAAQ,CAAA;IACnB,4BAAU,GAAG,UAAU,CAAA;IACvB,+BAAa,GAAG,aAAa,CAAA;IAC7B,4BAAU,GAAG,SAAS,CAAA;IACtB,4BAAU,GAAG,SAAS,CAAA;IACtB,0BAAQ,GAAG,OAAO,CAAA;IAClB,2BAAS,GAAG,QAAQ,CAAA;IACpB,6BAAW,GAAG,UAAU,CAAA;IACxB,gCAAc,GAAG,aAAa,CAAA;IACvC,wBAAC;CAAA,IAAA;AAED;;;;;AAKA;IASE,sBACE,IAAS,EACT,KAAU,EACV,IAAS,EACT,WAAgB,EAChB,MAAW,EACX,QAAgB,EAChB,KAAiB;QANjB,qBAAA,EAAA,SAAS;QACT,sBAAA,EAAA,UAAU;QACV,qBAAA,EAAA,SAAS;QACT,4BAAA,EAAA,gBAAgB;QAChB,uBAAA,EAAA,WAAW;QAEX,sBAAA,EAAA,SAAiB;QAfnB,SAAI,GAAG,EAAE,CAAA;QACT,UAAK,GAAG,EAAE,CAAA;QACV,SAAI,GAAG,EAAE,CAAA;QACT,gBAAW,GAAG,EAAE,CAAA;QAChB,WAAM,GAAG,EAAE,CAAA;QACX,aAAQ,GAAG,EAAE,CAAA;QAYX,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAA;QACtB,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,EAAE,CAAA;QACxB,IAAI,CAAC,IAAI,GAAG,IAAI,IAAI,EAAE,CAAA;QACtB,IAAI,CAAC,WAAW,GAAG,WAAW,IAAI,EAAE,CAAA;QACpC,IAAI,CAAC,MAAM,GAAG,MAAM,IAAI,OAAO,CAAA;QAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,IAAI,GAAG,CAAA;QAC/B,IAAI,CAAC,KAAK,GAAG,KAAK,IAAI,CAAC,CAAA;KACxB;IAED,sBAAI,gCAAM;aAAV;YACE,IAAI,MAAM,GAAU,EAAE,CAAA;YACtB,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,MAAM,CAAC,UAAC,aAAa,EAAE,YAAY;gBAC9D,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAA;gBAChC,OAAO,aAAa,CAAA;aACrB,EAAE,MAAM,CAAC,CAAA;YACV,OAAO,MAAM,CAAA;SACd;;;OAAA;IACH,mBAAC;CAAA,IAAA;AAED;;;;AAIA;IAIE,oBAAY,KAAkB,EAAE,QAAkB;QAChD,IAAI,CAAC,MAAM,GAAG,KAAK,CAAA;QACnB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;KAC1B;IAEM,kCAAa,GAApB,UAAqB,YAA0B;QAA/C,iBAWC;QAVC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,MAAM;iBACR,OAAO,CAAC,iBAAiB,CAAC,aAAa,EAAE,YAAY,CAAC,MAAM,CAAC;iBAC7D,IAAI,CAAC,UAAC,OAAY;gBACjB,OAAO,CAAC,OAAO,CAAC,CAAA;aACjB,CAAC;iBACD,KAAK,CAAC,UAAC,GAAQ;gBACd,MAAM,CAAC,GAAG,CAAC,CAAA;aACZ,CAAC,CAAA;SACL,CAAC,CAAA;KACH;IAEM,+BAAU,GAAjB,UAAkB,EAAU;QAA5B,iBAgBC;QAfC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAM,QAAQ,GAAG,IAAI,YAAY,EAAE,CAAA;YACnC,QAAQ,CAAC,GAAG,CAAC,YAAY,CAAC,SAAS,EAAE,EAAE,CAAC,CAAA;YACxC,KAAI,CAAC,SAAS;iBACX,KAAK,CAAC,QAAQ,CAAC;iBACf,IAAI,CAAC,UAAC,QAAe;gBACb,IAAA,qBAAO,CAAY;gBAC1B,IAAM,WAAW,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,CAAA;gBAC3C,IAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,WAAW,CAAC,CAAA;gBAC3C,OAAO,CAAC,WAAsB,CAAC,CAAA;aAChC,CAAC;iBACD,KAAK,CAAC,UAAA,GAAG;gBACR,MAAM,CAAC,GAAG,CAAC,CAAA;aACZ,CAAC,CAAA;SACL,CAAC,CAAA;KACH;;;;;;;;;IAUM,kCAAa,GAApB,UACE,GAAW,EACX,QAAgB,EAChB,UAAkB;QAHpB,iBAyCC;QApCC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAM,OAAO,GAAG,IAAI,YAAY,EAAE,CAAA;YAClC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,EAAE,QAAQ,CAAC,CAAA;YAE9C,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;gBAChC,IAAA,mBAAO,CAAU;gBACxB,IAAM,SAAS,GAAG,OAAO;qBACtB,GAAG,CAAC,OAAO,CAAC;qBACZ,GAAG,CAAC,WAAW,CAAC;qBAChB,GAAG,CAAC,CAAC,CAAC;qBACN,GAAG,CAAC,CAAC,CAAC,CAAA;gBACT,IAAM,WAAW,GAAG,mBAAmB,CAAC,iBAAiB,EAAE,CAAA;gBAC3D,IAAM,YAAY,GAA2B;oBAC3C,MAAM,EAAE,QAAQ;oBAChB,GAAG,EAAE,GAAG;iBACT,CAAA;gBACD,mBAAmB,CAAC,YAAY,CAC9B;oBACE,IAAI,EAAE,wBAAwB,CAAC,oBAAoB;oBACnD,SAAS,EAAE,YAAY;iBACxB,EACD,WAAW,CACZ,CAAA;gBACD,mBAAmB,CAAC,oBAAoB,CACtC,WAAW,EACX,UAAU,EACV,SAAS,CACV;qBACE,IAAI,CAAC;oBACJ,OAAO,EAAE,CAAA;iBACV,CAAC;qBACD,KAAK,CAAC;oBACL,MAAM,EAAE,CAAA;iBACT,CAAC,CAAA;aACL,CAAC,CAAA;SACH,CAAC,CAAA;KACH;;;;;;;;;;IAWM,uCAAkB,GAAzB,UACE,SAAiB,EACjB,eAAuB;QAFzB,iBAiBC;QAbC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,MAAM;iBACR,OAAO,CAAC,iBAAiB,CAAC,oBAAoB,EAAE;gBAC/C,EAAE,CAAC,EAAE,eAAe,EAAE;gBACtB,SAAS;aACV,CAAC;iBACD,IAAI,CAAC,UAAA,GAAG;gBACP,OAAO,CAAC,GAAG,CAAC,CAAA;aACb,CAAC;iBACD,KAAK,CAAC,UAAA,GAAG;gBACR,MAAM,CAAC,GAAG,CAAC,CAAA;aACZ,CAAC,CAAA;SACL,CAAC,CAAA;KACH;;;;;;;;IASM,wCAAmB,GAA1B,UAA2B,OAAiB;QAA5C,iBAWC;QAVC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,MAAM;iBACR,OAAO,CAAC,iBAAiB,CAAC,mBAAmB,EAAE,CAAC,OAAO,CAAC,CAAC;iBACzD,IAAI,CAAC,UAAA,IAAI;gBACR,OAAO,CAAC,IAAI,CAAC,CAAA;aACd,CAAC;iBACD,KAAK,CAAC,UAAA,GAAG;gBACR,MAAM,CAAC,GAAG,CAAC,CAAA;aACZ,CAAC,CAAA;SACL,CAAC,CAAA;KACH;;;;;;;;;;;IAYM,+BAAU,GAAjB,UACE,OAAqB,EACrB,UAAkB,EAClB,SAAiB;QAHnB,iBAqDC;QAhDC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,OAAO,CAAC,IAAI,GAAG,KAAI,CAAC,WAAW,CAAC,OAAO,CAAC,IAAI,CAAC,CAAA;YAC7C,IAAM,eAAe,GAA2B;gBAC9C,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,MAAM,EAAE,OAAO,CAAC,QAAQ;gBACxB,UAAU,EAAE,EAAE;gBACd,GAAG,EAAE,OAAO,CAAC,GAAG;gBAChB,MAAM,EAAE,OAAO,CAAC,OAAO,CAAC,MAAM;gBAC9B,KAAK,EAAE;oBACL;wBACE,MAAM,EAAE,CAAC;wBACT,KAAK,EAAE;4BACL,MAAM,EAAE,OAAO,CAAC,KAAK;4BACrB,QAAQ,EAAE,QAAQ,CAAC,QAAQ;yBAC5B;qBACF;iBACF;gBACD,IAAI,EAAE,OAAO,CAAC,IAAI;gBAClB,OAAO,EAAE,OAAO,CAAC,OAAO,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,MAAM,GAAA,CAAC;gBAC3C,SAAS,EAAE,OAAO,CAAC,QAAQ;gBAC3B,UAAU,EAAE,OAAO,CAAC,IAAI;gBACxB,cAAc,EAAE;oBACd,MAAM,EAAE,KAAI,CAAC,YAAY,CAAC,OAAO,CAAC;oBAClC,QAAQ,EAAE,QAAQ,CAAC,QAAQ;iBAC5B;gBACD,QAAQ,EAAE,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,QAAQ,CAAC;aAC3C,CAAA;YACD,IAAM,WAAW,GAAG,mBAAmB,CAAC,iBAAiB,EAAE,CAAA;YAC3D,mBAAmB,CAAC,YAAY,CAC9B;gBACE,IAAI,EAAE,wBAAwB,CAAC,cAAc;gBAC7C,SAAS,EAAE,eAAe;aAC3B,EACD,WAAW,CACZ,CAAA;YAED,mBAAmB,CAAC,oBAAoB,CACtC,WAAW,EACX,UAAU,EACV,SAAS,CACV;iBACE,IAAI,CAAC;gBACJ,OAAO,EAAE,CAAA;aACV,CAAC;iBACD,KAAK,CAAC,UAAA,GAAG;gBACR,MAAM,CAAC,GAAG,CAAC,CAAA;aACZ,CAAC,CAAA;SACL,CAAC,CAAA;KACH;IAEO,gCAAW,GAAnB,UAAoB,QAAgB;QAClC,OAAO,IAAI,CAAC,IAAI,CAAC,QAAQ,IAAI,IAAI,GAAG,IAAI,CAAC,CAAC,CAAA;KAC3C;IAEO,iCAAY,GAApB,UAAqB,OAAqB;QACxC,IAAM,QAAQ,GAAG,MAAM,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC,IAAI,CAAC,MAAM,EAAE,EAAE,MAAM,CAAC,GAAG,CAAC,CAAA;QAChE,OAAO,IAAI,CAAC,IAAI,CACd,IAAI,CAAC,WAAW,CAAC,OAAO,CAAC,QAAQ,CAAC;YAChC,OAAO,CAAC,OAAO,CAAC,MAAM,CACpB,UAAC,GAAG,EAAE,IAAI,IAAK,OAAA,GAAG,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,QAAQ,GAAA,EACjD,CAAC,CACF,CACJ,CAAA;KACF;;;;;;;;;;;IAYM,+BAAU,GAAjB,UACE,SAAiB,EACjB,OAAe,EACf,WAAmB,EACnB,UAAkB,EAClB,MAAc;QALhB,iBAyCC;QAlCC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,UAAU,CAAC,SAAS,CAAC;iBACvB,IAAI,CAAC,UAAC,OAAgB;gBACrB,IAAM,WAAW,GAAG,mBAAmB,CAAC,iBAAiB,EAAE,CAAA;gBAC3D,IAAM,YAAY,GAAwB;oBACxC,GAAG,EAAE,OAAO,CAAC,GAAG;oBAChB,QAAQ,EAAE,OAAO;oBACjB,KAAK,EAAE,OAAO,CAAC,KAAK;oBACpB,gBAAgB,EAAE,CAAC;oBACnB,MAAM,EAAE,EAAE,CAAC,EAAE,WAAW,EAAE;iBAC3B,CAAA;gBACD,mBAAmB,CAAC,YAAY,CAC9B;oBACE,IAAI,EAAE,wBAAwB,CAAC,YAAY;oBAC3C,SAAS,EAAE,YAAY;iBACxB,EACD,WAAW,CACZ,CAAA;gBACD,mBAAmB,CAAC,oBAAoB,CACtC,WAAW,EACX,UAAU,EACV,MAAM,CACP;qBACE,IAAI,CAAC;oBACJ,OAAO,EAAE,CAAA;iBACV,CAAC;qBACD,KAAK,CAAC,UAAA,GAAG;oBACR,MAAM,EAAE,CAAA;iBACT,CAAC,CAAA;aACL,CAAC;iBACD,KAAK,CAAC,UAAA,GAAG;gBACR,MAAM,CAAC,GAAG,CAAC,CAAA;aACZ,CAAC,CAAA;SACL,CAAC,CAAA;KACH;IACH,iBAAC;CAAA;;;;;;;;;;;;;;;;AC1ZD,IAAM,QAAQ,GAAG,OAAO,MAAM,KAAK,WAAW,IAAI,MAAM,CAAC;AACzD,IAAM,MAAM,GAAG,OAAO,IAAI,KAAK,WAAW,IAAI,OAAO,iBAAiB,KAAK,WAAW;IAClF,IAAI,YAAY,iBAAiB,IAAI,IAAI,CAAC;AAC9C,IAAM,QAAQ,GAAG,OAAOE,cAAM,KAAK,WAAW,IAAIA,cAAM,CAAC;AACzD,IAAM,KAAK,GAAQ,QAAQ,IAAI,QAAQ,IAAI,MAAM;AAW/B,UAAI,SAX4B;;;;AAKlD,CAAC;IACC,IAAI,CAAC,KAAK,EAAE;QACV,MAAM,IAAI,KAAK,CAAC,+DAA+D,CAAC,CAAC;KAClF;CACF,GAAG,CAAC;;;;;;;;AC5BL,oBAA2B,CAAM;IAC/B,OAAO,OAAO,CAAC,KAAK,UAAU,CAAC;CAChC;AAFe,gBAAU,aAEzB,CAAA;;;;;;;;ACFY,aAAO,GAAG,KAAK,CAAC,OAAO,KAAK,UAAI,CAAM,IAAe,OAAA,CAAC,IAAI,OAAO,CAAC,CAAC,MAAM,KAAK,QAAQ,GAAA,CAAC,CAAC;;;;;;;;ACArG,kBAAyB,CAAM;IAC7B,OAAO,CAAC,IAAI,IAAI,IAAI,OAAO,CAAC,KAAK,QAAQ,CAAC;CAC3C;AAFe,cAAQ,WAEvB,CAAA;;;;;;;;;ACDY,iBAAW,GAAQ,EAAE,CAAC,EAAE,EAAE,EAAE,CAAC;;;;;;;;;ACC1C,IAAI,cAAwB,CAAC;AAE7B;IACE,IAAI;QACF,OAAO,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;KAC7C;IAAA,OAAO,CAAC,EAAE;QACVC,uBAAW,CAAC,CAAC,GAAG,CAAC,CAAC;QAClB,OAAOA,uBAAW,CAAC;KACpB;CACF;AAED,kBAA6C,EAAK;IAChD,cAAc,GAAG,EAAE,CAAC;IACpB,OAAY,UAAU,CAAC;CACxB;AAHe,cAAQ,WAGvB,CAAA;AAAA,AAAC;;;;;;;;;;;;;;;;;ACZF;IAAyCC,yCAAK;IAC5C,6BAAmB,MAAa;QAC9B,iBAAO,CAAC;QADS,WAAM,GAAN,MAAM,CAAO;QAE9B,IAAM,GAAG,GAAQ,KAAK,CAAC,IAAI,CAAC,IAAI,EAAE,MAAM;YACnC,MAAM,CAAC,MAAM,mDAClB,MAAM,CAAC,GAAG,CAAC,UAAC,GAAG,EAAE,CAAC,IAAK,SAAG,CAAC,GAAG,CAAC,WAAK,GAAG,CAAC,QAAQ,EAAE,IAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAG,GAAG,EAAE,CAAC,CAAC;QACpE,IAAK,CAAC,IAAI,GAAG,GAAG,CAAC,IAAI,GAAG,qBAAqB,CAAC;QAC9C,IAAK,CAAC,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;QACxB,IAAK,CAAC,OAAO,GAAG,GAAG,CAAC,OAAO,CAAC;KACpC;IACH,0BAAC;CAAA,CAVwC,KAAK,GAU7C;AAVY,yBAAmB,sBAU/B,CAAA;;;;;;;;;;;;;;;;;;;;;;;;;;ACgBD;;;;;IAoBE,sBAAY,WAAwB;;;;;QAV7B,WAAM,GAAY,KAAK,CAAC;QAErB,YAAO,GAAiB,IAAI,CAAC;QAC7B,aAAQ,GAAmB,IAAI,CAAC;QAClC,mBAAc,GAAoB,IAAI,CAAC;QAO7C,IAAI,WAAW,EAAE;YACR,IAAK,CAAC,YAAY,GAAG,WAAW,CAAC;SACzC;KACF;;;;;;;IAQD,kCAAW,GAAX;QACE,IAAI,SAAS,GAAG,KAAK,CAAC;QACtB,IAAI,MAAa,CAAC;QAElB,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,OAAO;SACR;QAED,IAAA,SAAsE,EAAhE,oBAAO,EAAE,sBAAQ,EAAE,8BAAY,EAAE,kCAAc,CAAkB;QAEvE,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;QACnB,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;;;QAGrB,IAAI,CAAC,cAAc,GAAG,IAAI,CAAC;QAE3B,IAAI,KAAK,GAAG,CAAC,CAAC,CAAC;QACf,IAAI,GAAG,GAAG,QAAQ,GAAG,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;;;QAIzC,OAAO,OAAO,EAAE;YACd,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;;;YAGrB,OAAO,GAAG,EAAE,KAAK,GAAG,GAAG,IAAI,QAAQ,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC;SACpD;QAED,IAAI,uBAAU,CAAC,YAAY,CAAC,EAAE;YAC5B,IAAI,KAAK,GAAG,mBAAQ,CAAC,YAAY,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;YAC9C,IAAI,KAAK,KAAKD,uBAAW,EAAE;gBACzB,SAAS,GAAG,IAAI,CAAC;gBACjB,MAAM,GAAG,MAAM,KACbA,uBAAW,CAAC,CAAC,YAAY,yCAAmB;oBAC1C,2BAA2B,CAACA,uBAAW,CAAC,CAAC,CAAC,MAAM,CAAC,GAAG,CAACA,uBAAW,CAAC,CAAC,CAAC,CACtE,CAAC;aACH;SACF;QAED,IAAIE,eAAO,CAAC,cAAc,CAAC,EAAE;YAE3B,KAAK,GAAG,CAAC,CAAC,CAAC;YACX,GAAG,GAAG,cAAc,CAAC,MAAM,CAAC;YAE5B,OAAO,EAAE,KAAK,GAAG,GAAG,EAAE;gBACpB,IAAM,GAAG,GAAG,cAAc,CAAC,KAAK,CAAC,CAAC;gBAClC,IAAI,mBAAQ,CAAC,GAAG,CAAC,EAAE;oBACjB,IAAI,KAAK,GAAG,mBAAQ,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;oBAChD,IAAI,KAAK,KAAKF,uBAAW,EAAE;wBACzB,SAAS,GAAG,IAAI,CAAC;wBACjB,MAAM,GAAG,MAAM,IAAI,EAAE,CAAC;wBACtB,IAAI,GAAG,GAAGA,uBAAW,CAAC,CAAC,CAAC;wBACxB,IAAI,GAAG,YAAY,yCAAmB,EAAE;4BACtC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC,2BAA2B,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;yBACjE;6BAAM;4BACL,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;yBAClB;qBACF;iBACF;aACF;SACF;QAED,IAAI,SAAS,EAAE;YACb,MAAM,IAAI,yCAAmB,CAAC,MAAM,CAAC,CAAC;SACvC;KACF;;;;;;;;;;;;;;;;;;;IAoBD,0BAAG,GAAH,UAAI,QAAuB;QACzB,IAAI,CAAC,QAAQ,KAAK,QAAQ,KAAK,YAAY,CAAC,KAAK,CAAC,EAAE;YAClD,OAAO,YAAY,CAAC,KAAK,CAAC;SAC3B;QAED,IAAI,QAAQ,KAAK,IAAI,EAAE;YACrB,OAAO,IAAI,CAAC;SACb;QAED,IAAI,YAAY,GAAmB,QAAS,CAAC;QAE7C,QAAQ,OAAO,QAAQ;YACrB,KAAK,UAAU;gBACb,YAAY,GAAG,IAAI,YAAY,CAAiB,QAAQ,CAAC,CAAC;YAC5D,KAAK,QAAQ;gBACX,IAAI,YAAY,CAAC,MAAM,IAAI,OAAO,YAAY,CAAC,WAAW,KAAK,UAAU,EAAE;oBACzE,OAAO,YAAY,CAAC;iBACrB;qBAAM,IAAI,IAAI,CAAC,MAAM,EAAE;oBACtB,YAAY,CAAC,WAAW,EAAE,CAAC;oBAC3B,OAAO,YAAY,CAAC;iBACrB;qBAAM,IAAI,OAAO,YAAY,CAAC,UAAU,KAAK,UAAU,oBAAoB;oBAC1E,IAAM,GAAG,GAAG,YAAY,CAAC;oBACzB,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;oBAClC,YAAY,CAAC,cAAc,GAAG,CAAC,GAAG,CAAC,CAAC;iBACrC;gBACD,MAAM;YACR;gBACE,MAAM,IAAI,KAAK,CAAC,wBAAwB,GAAG,QAAQ,GAAG,yBAAyB,CAAC,CAAC;SACpF;QAED,IAAM,aAAa,GAAG,IAAI,CAAC,cAAc,KAAK,IAAI,CAAC,cAAc,GAAG,EAAE,CAAC,CAAC;QAExE,aAAa,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;QACjC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;QAE9B,OAAO,YAAY,CAAC;KACrB;;;;;;;IAQD,6BAAM,GAAN,UAAO,YAA0B;QAC/B,IAAM,aAAa,GAAG,IAAI,CAAC,cAAc,CAAC;QAC1C,IAAI,aAAa,EAAE;YACjB,IAAM,iBAAiB,GAAG,aAAa,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC;YAC9D,IAAI,iBAAiB,KAAK,CAAC,CAAC,EAAE;gBAC5B,aAAa,CAAC,MAAM,CAAC,iBAAiB,EAAE,CAAC,CAAC,CAAC;aAC5C;SACF;KACF;IAEO,iCAAU,GAAlB,UAAmB,MAAoB;QACrC,IAAA,SAAgC,EAA1B,oBAAO,EAAE,sBAAQ,CAAU;QACjC,IAAI,CAAC,OAAO,IAAI,OAAO,KAAK,MAAM,EAAE;;;YAGlC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAC;SACvB;aAAM,IAAI,CAAC,QAAQ,EAAE;;;YAGpB,IAAI,CAAC,QAAQ,GAAG,CAAC,MAAM,CAAC,CAAC;SAC1B;aAAM,IAAI,QAAQ,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,EAAE;;YAE1C,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;SACvB;KACF;IAzLa,kBAAK,IAAkB,UAAS,KAAU;QACtD,KAAK,CAAC,MAAM,GAAG,IAAI,CAAC;QACpB,OAAO,KAAK,CAAC;KACd,CAAC,IAAI,YAAY,EAAE,CAAC,CAAC,CAAC;IAuLzB,mBAAC;CAAA,IAAA;AA3LY,kBAAY,eA2LxB,CAAA;AAED,qCAAqC,MAAa;IACjD,OAAO,MAAM,CAAC,MAAM,CAAC,UAAC,IAAI,EAAE,GAAG,IAAK,OAAA,IAAI,CAAC,MAAM,CAAC,CAAC,GAAG,YAAY,yCAAmB,IAAI,GAAG,CAAC,MAAM,GAAG,GAAG,CAAC,GAAA,EAAE,EAAE,CAAC,CAAC;CAC9G;;;;;;;;AC/LY,SAAK,GAAkB;IAClC,MAAM,EAAE,IAAI;IACZ,IAAI,YAAC,KAAU,KAAqB;IACpC,KAAK,YAAC,GAAQ,IAAU,MAAM,GAAG,CAAC,EAAE;IACpC,QAAQ,iBAAqB;CAC9B,CAAC;;;;;;;;;;ACjCF,IAAM,MAAM,GAAQG,SAAI,CAAC,MAAM,CAAC;AAEnB,oBAAY,GAAG,CAAC,OAAO,MAAM,KAAK,UAAU,IAAI,OAAO,MAAM,CAAC,GAAG,KAAK,UAAU;IAC3F,MAAM,CAAC,GAAG,CAAC,cAAc,CAAC,GAAG,gBAAgB,CAAC;;;;AAKnC,sBAAc,GAAG,oBAAY,CAAC;;;;;;;;;;;;;;;;;;;;;;;;ACM3C;IAAmCF,gCAAY;;;;;;;;;IAsC7C,oBAAY,iBAA+D,EAC/D,KAAyB,EACzB,QAAqB;QAC/B,iBAAO,CAAC;QAlBH,mBAAc,GAAQ,IAAI,CAAC;QAC3B,oBAAe,GAAY,KAAK,CAAC;QACjC,uBAAkB,GAAY,KAAK,CAAC;QAEjC,cAAS,GAAY,KAAK,CAAC;QAgBnC,QAAQ,SAAS,CAAC,MAAM;YACtB,KAAK,CAAC;gBACJ,IAAI,CAAC,WAAW,GAAGG,cAAa,CAAC;gBACjC,MAAM;YACR,KAAK,CAAC;gBACJ,IAAI,CAAC,iBAAiB,EAAE;oBACtB,IAAI,CAAC,WAAW,GAAGA,cAAa,CAAC;oBACjC,MAAM;iBACP;gBACD,IAAI,OAAO,iBAAiB,KAAK,QAAQ,EAAE;oBACzC,IAAI,iBAAiB,YAAY,UAAU,EAAE;wBAC3C,IAAI,CAAC,WAAW,GAAsB,iBAAkB,CAAC;wBAClD,IAAI,CAAC,WAAY,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;qBACpC;yBAAM;wBACL,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;wBAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,cAAc,CAAI,IAAI,EAAyB,iBAAiB,CAAC,CAAC;qBAC1F;oBACD,MAAM;iBACP;YACH;gBACE,IAAI,CAAC,kBAAkB,GAAG,IAAI,CAAC;gBAC/B,IAAI,CAAC,WAAW,GAAG,IAAI,cAAc,CAAI,IAAI,EAAyB,iBAAiB,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;gBAC1G,MAAM;SACT;KACF;IAjED,qBAACC,yBAAkB,CAAC,GAApB,cAAyB,OAAO,IAAI,CAAC,EAAE;;;;;;;;;;;;IAahC,iBAAM,GAAb,UAAiB,IAAsB,EACtB,KAAyB,EACzB,QAAqB;QACpC,IAAM,UAAU,GAAG,IAAI,UAAU,CAAC,IAAI,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QACzD,UAAU,CAAC,kBAAkB,GAAG,KAAK,CAAC;QACtC,OAAO,UAAU,CAAC;KACnB;;;;;;;;IAuDD,yBAAI,GAAJ,UAAK,KAAS;QACZ,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;SACnB;KACF;;;;;;;;IASD,0BAAK,GAAL,UAAM,GAAS;QACb,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;SAClB;KACF;;;;;;;IAQD,6BAAQ,GAAR;QACE,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACnB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;YACtB,IAAI,CAAC,SAAS,EAAE,CAAC;SAClB;KACF;IAED,gCAAW,GAAX;QACE,IAAI,IAAI,CAAC,MAAM,EAAE;YACf,OAAO;SACR;QACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;QACtB,gBAAK,CAAC,WAAW,WAAE,CAAC;KACrB;IAES,0BAAK,GAAf,UAAgB,KAAQ;QACtB,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;KAC9B;IAES,2BAAM,GAAhB,UAAiB,GAAQ;QACvB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAC5B,IAAI,CAAC,WAAW,EAAE,CAAC;KACpB;IAES,8BAAS,GAAnB;QACE,IAAI,CAAC,WAAW,CAAC,QAAQ,EAAE,CAAC;QAC5B,IAAI,CAAC,WAAW,EAAE,CAAC;KACpB;IAES,2CAAsB,GAAhC;QACE,IAAA,SAAkC,EAA1B,oBAAO,EAAE,sBAAQ,CAAU;QACnC,IAAI,CAAC,OAAO,GAAG,IAAI,CAAC;QACpB,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,WAAW,EAAE,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;QACvB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;QACvB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;QACzB,OAAO,IAAI,CAAC;KACb;IACH,iBAAC;CAAA,CA9IkC,2BAAY,GA8I9C;AA9IY,gBAAU,aA8ItB,CAAA;;;;;;AAOD;IAAgCJ,oCAAa;IAI3C,wBAAoB,iBAAgC,EACxC,cAA0D,EAC1D,KAAyB,EACzB,QAAqB;QAC/B,iBAAO,CAAC;QAJU,sBAAiB,GAAjB,iBAAiB,CAAe;QAMlD,IAAI,IAA0B,CAAC;QAC/B,IAAI,OAAO,GAAQ,IAAI,CAAC;QAExB,IAAI,uBAAU,CAAC,cAAc,CAAC,EAAE;YAC9B,IAAI,GAA2B,cAAe,CAAC;SAChD;aAAM,IAAI,cAAc,EAAE;YACzB,IAAI,GAAyB,cAAe,CAAC,IAAI,CAAC;YAClD,KAAK,GAAyB,cAAe,CAAC,KAAK,CAAC;YACpD,QAAQ,GAAyB,cAAe,CAAC,QAAQ,CAAC;YAC1D,IAAI,cAAc,KAAKG,cAAa,EAAE;gBACpC,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC,cAAc,CAAC,CAAC;gBACxC,IAAI,uBAAU,CAAC,OAAO,CAAC,WAAW,CAAC,EAAE;oBACnC,IAAI,CAAC,GAAG,CAAc,OAAO,CAAC,WAAW,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;iBAC1D;gBACD,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACnD;SACF;QAED,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC;QACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;QAClB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;QACpB,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAC;KAC3B;IAED,6BAAI,GAAJ,UAAK,KAAS;QACZ,IAAI,CAAC,IAAI,CAAC,SAAS,IAAI,IAAI,CAAC,KAAK,EAAE;YACzB,8CAAiB,CAAU;YACnC,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,EAAE;gBACzC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;aACtC;iBAAM,IAAI,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,IAAI,CAAC,KAAK,EAAE,KAAK,CAAC,EAAE;gBACrE,IAAI,CAAC,WAAW,EAAE,CAAC;aACpB;SACF;KACF;IAED,8BAAK,GAAL,UAAM,GAAS;QACb,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACX,8CAAiB,CAAU;YACnC,IAAI,IAAI,CAAC,MAAM,EAAE;gBACf,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,EAAE;oBACzC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBACpC,IAAI,CAAC,WAAW,EAAE,CAAC;iBACpB;qBAAM;oBACL,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,IAAI,CAAC,MAAM,EAAE,GAAG,CAAC,CAAC;oBAC1D,IAAI,CAAC,WAAW,EAAE,CAAC;iBACpB;aACF;iBAAM,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,EAAE;gBAChD,IAAI,CAAC,WAAW,EAAE,CAAC;gBACnB,MAAM,GAAG,CAAC;aACX;iBAAM;gBACL,iBAAiB,CAAC,cAAc,GAAG,GAAG,CAAC;gBACvC,iBAAiB,CAAC,eAAe,GAAG,IAAI,CAAC;gBACzC,IAAI,CAAC,WAAW,EAAE,CAAC;aACpB;SACF;KACF;IAED,iCAAQ,GAAR;QAAA,iBAiBC;QAhBC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;YACX,8CAAiB,CAAU;YACnC,IAAI,IAAI,CAAC,SAAS,EAAE;gBAClB,IAAM,eAAe,GAAG,cAAM,OAAA,KAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAI,CAAC,QAAQ,CAAC,GAAA,CAAC;gBAEjE,IAAI,CAAC,iBAAiB,CAAC,kBAAkB,EAAE;oBACzC,IAAI,CAAC,YAAY,CAAC,eAAe,CAAC,CAAC;oBACnC,IAAI,CAAC,WAAW,EAAE,CAAC;iBACpB;qBAAM;oBACL,IAAI,CAAC,eAAe,CAAC,iBAAiB,EAAE,eAAe,CAAC,CAAC;oBACzD,IAAI,CAAC,WAAW,EAAE,CAAC;iBACpB;aACF;iBAAM;gBACL,IAAI,CAAC,WAAW,EAAE,CAAC;aACpB;SACF;KACF;IAEO,qCAAY,GAApB,UAAqB,EAAY,EAAE,KAAW;QAC5C,IAAI;YACF,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;SAC9B;QAAA,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,WAAW,EAAE,CAAC;YACnB,MAAM,GAAG,CAAC;SACX;KACF;IAEO,wCAAe,GAAvB,UAAwB,MAAqB,EAAE,EAAY,EAAE,KAAW;QACtE,IAAI;YACF,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC;SAC9B;QAAA,OAAO,GAAG,EAAE;YACZ,MAAM,CAAC,cAAc,GAAG,GAAG,CAAC;YAC5B,MAAM,CAAC,eAAe,GAAG,IAAI,CAAC;YAC9B,OAAO,IAAI,CAAC;SACb;QACD,OAAO,KAAK,CAAC;KACd;IAES,qCAAY,GAAtB;QACU,8CAAiB,CAAU;QACnC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;QACrB,IAAI,CAAC,iBAAiB,GAAG,IAAI,CAAC;QAC9B,iBAAiB,CAAC,WAAW,EAAE,CAAC;KACjC;IACH,qBAAC;CAAA,CAhH+B,UAAU,GAgHzC;;;;;;;;;;;ACjRD,sBACE,cAA0D,EAC1D,KAA4B,EAC5B,QAAqB;IAErB,IAAI,cAAc,EAAE;QAClB,IAAI,cAAc,YAAY,uBAAU,EAAE;YACxC,OAAwB,cAAe,CAAC;SACzC;QAED,IAAI,cAAc,CAACC,yBAAkB,CAAC,EAAE;YACtC,OAAO,cAAc,CAACA,yBAAkB,CAAC,EAAE,CAAC;SAC7C;KACF;IAED,IAAI,CAAC,cAAc,IAAI,CAAC,KAAK,IAAI,CAAC,QAAQ,EAAE;QAC1C,OAAO,IAAI,uBAAU,CAACD,cAAa,CAAC,CAAC;KACtC;IAED,OAAO,IAAI,uBAAU,CAAC,cAAc,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;CACxD;AApBe,kBAAY,eAoB3B,CAAA;;;;;;;;;;ACtBD,6BAAoC,OAAY;IAC9C,IAAI,YAAiB,CAAC;IACtB,IAAI,MAAM,GAAG,OAAO,CAAC,MAAM,CAAC;IAE5B,IAAI,OAAO,MAAM,KAAK,UAAU,EAAE;QAChC,IAAI,MAAM,CAAC,UAAU,EAAE;YACrB,YAAY,GAAG,MAAM,CAAC,UAAU,CAAC;SAClC;aAAM;YACH,YAAY,GAAG,MAAM,CAAC,YAAY,CAAC,CAAC;YACpC,MAAM,CAAC,UAAU,GAAG,YAAY,CAAC;SACpC;KACF;SAAM;QACL,YAAY,GAAG,cAAc,CAAC;KAC/B;IAED,OAAO,YAAY,CAAC;CACrB;AAhBe,2BAAmB,sBAgBlC,CAAA;AAEY,kBAAU,GAAG,mBAAmB,CAACD,SAAI,CAAC,CAAC;;;;AAKvC,oBAAY,GAAG,kBAAU,CAAC;;;;;;ACxBvC,mBAA0B;AAAV,UAAI,OAAM,CAAA;;;;;;;;;;ACe1B;IAA2B,aAAkC;SAAlC,YAAA,uBAAA,IAAkC;QAAlC,4BAAkC;;IAC3D,OAAO,aAAa,CAAC,GAAG,CAAC,CAAC;CAC3B;AAFe,UAAI,OAEnB,CAAA;;AAGD,uBAAoC,GAA+B;IACjE,IAAI,CAAC,GAAG,EAAE;QACR,OAAO,WAA+B,CAAC;KACxC;IAED,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,EAAE;QACpB,OAAO,GAAG,CAAC,CAAC,CAAC,CAAC;KACf;IAED,OAAO,eAAe,KAAQ;QAC5B,OAAO,GAAG,CAAC,MAAM,CAAC,UAAC,IAAS,EAAE,EAAuB,IAAK,OAAA,EAAE,CAAC,IAAI,CAAC,GAAA,EAAE,KAAK,CAAC,CAAC;KAC5E,CAAC;CACH;AAZe,mBAAa,gBAY5B,CAAA;;;;;;;;;;;;;;;;;;;ACND;;;;;;;;IAcE,oBAAY,SAA6E;QAZlF,cAAS,GAAY,KAAK,CAAC;QAahC,IAAI,SAAS,EAAE;YACb,IAAI,CAAC,UAAU,GAAG,SAAS,CAAC;SAC7B;KACF;;;;;;;;IAuBD,yBAAI,GAAJ,UAAQ,QAAwB;QAC9B,IAAMG,aAAU,GAAG,IAAI,UAAU,EAAK,CAAC;QACvCA,aAAU,CAAC,MAAM,GAAG,IAAI,CAAC;QACzBA,aAAU,CAAC,QAAQ,GAAG,QAAQ,CAAC;QAC/B,OAAOA,aAAU,CAAC;KACnB;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;IAuHD,8BAAS,GAAT,UAAU,cAA0D,EAC1D,KAA4B,EAC5B,QAAqB;QAErB,4BAAQ,CAAU;QAC1B,IAAM,IAAI,GAAG,2BAAY,CAAC,cAAc,EAAE,KAAK,EAAE,QAAQ,CAAC,CAAC;QAE3D,IAAI,QAAQ,EAAE;YACZ,QAAQ,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAC;SAClC;aAAM;YACL,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC,CAAC;SAC1E;QAED,IAAI,IAAI,CAAC,kBAAkB,EAAE;YAC3B,IAAI,CAAC,kBAAkB,GAAG,KAAK,CAAC;YAChC,IAAI,IAAI,CAAC,eAAe,EAAE;gBACxB,MAAM,IAAI,CAAC,cAAc,CAAC;aAC3B;SACF;QAED,OAAO,IAAI,CAAC;KACb;IAES,kCAAa,GAAvB,UAAwB,IAAmB;QACzC,IAAI;YACF,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC;SAC7B;QAAA,OAAO,GAAG,EAAE;YACZ,IAAI,CAAC,eAAe,GAAG,IAAI,CAAC;YAC5B,IAAI,CAAC,cAAc,GAAG,GAAG,CAAC;YAC1B,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SACjB;KACF;;;;;;;;IASD,4BAAO,GAAP,UAAQ,IAAwB,EAAE,WAA4B;QAA9D,iBAwCC;QAvCC,IAAI,CAAC,WAAW,EAAE;YAChB,IAAIH,SAAI,CAAC,EAAE,IAAIA,SAAI,CAAC,EAAE,CAAC,MAAM,IAAIA,SAAI,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE;gBACvD,WAAW,GAAGA,SAAI,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC;aACtC;iBAAM,IAAIA,SAAI,CAAC,OAAO,EAAE;gBACvB,WAAW,GAAGA,SAAI,CAAC,OAAO,CAAC;aAC5B;SACF;QAED,IAAI,CAAC,WAAW,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QAED,OAAO,IAAI,WAAW,CAAO,UAAC,OAAO,EAAE,MAAM;;;YAG3C,IAAI,YAA0B,CAAC;YAC/B,YAAY,GAAG,KAAI,CAAC,SAAS,CAAC,UAAC,KAAK;gBAClC,IAAI,YAAY,EAAE;;;;;oBAKhB,IAAI;wBACF,IAAI,CAAC,KAAK,CAAC,CAAC;qBACZ;oBAAA,OAAO,GAAG,EAAE;wBACZ,MAAM,CAAC,GAAG,CAAC,CAAC;wBACZ,YAAY,CAAC,WAAW,EAAE,CAAC;qBAC5B;iBACF;qBAAM;;;;;;;oBAOL,IAAI,CAAC,KAAK,CAAC,CAAC;iBACb;aACF,EAAE,MAAM,EAAE,OAAO,CAAC,CAAC;SACrB,CAAC,CAAC;KACJ;IAES,+BAAU,GAApB,UAAqB,UAA2B;QAC9C,OAAO,IAAI,CAAC,MAAM,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;KAC1C;;;;;;IAWD,qBAACI,qBAAiB,CAAC,GAAnB;QACE,OAAO,IAAI,CAAC;KACb;;;;;;;;;;;;;;;;;;;;IAiCD,yBAAI,GAAJ;QAAQ,oBAAuC;aAAvC,YAAA,uBAAA,IAAuC;YAAvC,mCAAuC;;QAC7C,IAAI,UAAU,CAAC,MAAM,KAAK,CAAC,EAAE;YAC3B,OAAO,IAAW,CAAC;SACpB;QAED,OAAO,oBAAa,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;KACxC;;IAQD,8BAAS,GAAT,UAAU,WAAoC;QAA9C,iBAiBC;QAhBC,IAAI,CAAC,WAAW,EAAE;YAChB,IAAIJ,SAAI,CAAC,EAAE,IAAIA,SAAI,CAAC,EAAE,CAAC,MAAM,IAAIA,SAAI,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,EAAE;gBACvD,WAAW,GAAGA,SAAI,CAAC,EAAE,CAAC,MAAM,CAAC,OAAO,CAAC;aACtC;iBAAM,IAAIA,SAAI,CAAC,OAAO,EAAE;gBACvB,WAAW,GAAGA,SAAI,CAAC,OAAO,CAAC;aAC5B;SACF;QAED,IAAI,CAAC,WAAW,EAAE;YAChB,MAAM,IAAI,KAAK,CAAC,uBAAuB,CAAC,CAAC;SAC1C;QAED,OAAO,IAAI,WAAW,CAAC,UAAC,OAAO,EAAE,MAAM;YACrC,IAAI,KAAU,CAAC;YACf,KAAI,CAAC,SAAS,CAAC,UAAC,CAAI,IAAK,OAAA,KAAK,GAAG,CAAC,GAAA,EAAE,UAAC,GAAQ,IAAK,OAAA,MAAM,CAAC,GAAG,CAAC,GAAA,EAAE,cAAM,OAAA,OAAO,CAAC,KAAK,CAAC,GAAA,CAAC,CAAC;SACtF,CAAe,CAAC;KAClB;;;;;;;;;;;IAxSM,iBAAM,GAAa,UAAI,SAAwD;QACpF,OAAO,IAAI,UAAU,CAAI,SAAS,CAAC,CAAC;KACrC,CAAA;IAuSH,iBAAC;CAAA,IAAA;AAvUY,gBAAU,aAuUtB;;AClWO,IAAA,qCAAG,CAAgC;AAC3C,IAAM,SAAS,GAAG,OAAO,CAAC,WAAW,CAAC,CAAA;AAEtC;IAAA;KAsBC;;;;;;;;;;IAZe,+BAAmB,GAAjC,UACE,OAAe,EACf,UAAkB,EAClB,SAAiB,EACjB,KAAkB;QAAlB,sBAAA,EAAA,UAAkB;QAElB,OAAO,GAAG,CAAC,qBAAqB,CAAC,UAAU,EAAE,SAAS,EAAE,KAAK,EAAE,OAAO,CAAC,CAAA;KACxE;IAEa,sBAAU,GAAxB,UAAyB,UAAkB;QACzC,OAAO,IAAI,SAAS,EAAE,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,MAAM,CAAC,KAAK,CAAC,CAAA;KACxD;IACH,kBAAC;CAAA;;ACeD;IAIE,iBAAY,GAAW,EAAE,KAAiB;QAAjB,sBAAA,EAAA,SAAiB;QACxC,IAAI,CAAC,IAAI,GAAG,GAAG,CAAA;QACf,IAAI,CAAC,MAAM,GAAG,KAAK,CAAA;KACpB;IAEM,+BAAa,GAApB;QACE,OAAO,CAAC,IAAI,CAAC,IAAI,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;KAChC;IACH,cAAC;CAAA,IAAA;AAaD;IAaE,qBAAY,WAAgB;QAC1B,IAAI,CAAC,cAAc,GAAG,WAAW,CAAC,cAAc,CAAA;QAChD,IAAI,CAAC,YAAY,GAAG,WAAW,CAAC,YAAY,CAAA;QAC5C,IAAI,CAAC,gBAAgB,GAAG,WAAW,CAAC,gBAAgB,CAAA;QACpD,IAAI,CAAC,oBAAoB,GAAG,WAAW,CAAC,oBAAoB,CAAA;QAC5D,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,iBAAiB,CAAA;QACtD,IAAI,CAAC,iBAAiB,GAAG,WAAW,CAAC,iBAAiB,CAAA;QACtD,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,WAAW,CAAA;QAC1C,IAAI,CAAC,MAAM,GAAG,IAAI,eAAe,CAAC,WAAW,CAAC,CAAA;KAC/C;IACH,kBAAC;CAAA,IAAA;AAED;IAOE,yBAAY,WAAgB;QAC1B,IAAI,CAAC,WAAW,CAAC,4BAA4B,EAAE;YAC7C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAA;SACnB;aAAM;YACL,IAAI,CAAC,KAAK,GAAG,IAAI,CAAA;YACjB,IAAI,CAAC,IAAI,GAAG,WAAW,CAAC,4BAA4B,CAAC,IAAI,CAAA;YACzD,IAAI,CAAC,OAAO,GAAG,WAAW,CAAC,4BAA4B,CAAC,OAAO,CAAA;YAC/D,IAAI,CAAC,KAAK,GAAG,WAAW,CAAC,4BAA4B,CAAC,KAAK,CAAA;YAC3D,IAAI,CAAC,EAAE,GAAG,WAAW,CAAC,4BAA4B,CAAC,EAAE,CAAA;SACtD;KACF;IACH,sBAAC;CAAA,IAAA;AAED;IAAA;KAOC;IANQ,mCAAsB,GAAG,wBAAwB,CAAA;IACjD,iCAAoB,GAAG,sBAAsB,CAAA;IAC7C,6CAAgC,GAAG,kCAAkC,CAAA;IACrE,kCAAqB,GAAG,uBAAuB,CAAA;IAC/C,8CAAiC,GAAG,mCAAmC,CAAA;IACvE,gDAAmC,GAAG,qCAAqC,CAAA;IACpF,mBAAC;CAAA,IAAA;AAED;;;AAGA;IAIE,oBAAY,KAAe,EAAE,QAAkB;QAC7C,IAAI,CAAC,MAAM,GAAG,KAAoB,CAAA;QAClC,IAAI,CAAC,SAAS,GAAG,QAAQ,CAAA;KAC1B;;;;;;;IAQM,qCAAgB,GAAvB,UAAwB,IAAY;QAApC,iBAWC;QAVC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,MAAM;iBACR,OAAO,CAAC,iBAAiB,CAAC,gBAAgB,EAAE,CAAC,IAAI,CAAC,CAAC;iBACnD,IAAI,CAAC,UAAC,OAAgB;gBACrB,OAAO,CAAC,OAAkB,CAAC,CAAA;aAC5B,CAAC;iBACD,KAAK,CAAC,UAAA,GAAG;gBACR,MAAM,CAAC,YAAY,CAAC,oBAAoB,CAAC,CAAA;aAC1C,CAAC,CAAA;SACL,CAAC,CAAA;KACH;;;;;;;IAQM,mCAAc,GAArB,UAAsB,EAAU;QAAhC,iBAeC;QAdC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,MAAM;iBACR,OAAO,CAAC,iBAAiB,CAAC,WAAW,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC9C,IAAI,CAAC,UAAC,QAAmB;gBACxB,IAAI,QAAQ,CAAC,MAAM,KAAK,CAAC,EAAE;oBACzB,MAAM,CAAC,YAAY,CAAC,sBAAsB,CAAC,CAAA;iBAC5C;gBACM,IAAA,qBAAO,CAAY;gBAC1B,OAAO,CAAC,OAAkB,CAAC,CAAA;aAC5B,CAAC;iBACD,KAAK,CAAC,UAAA,GAAG;gBACR,MAAM,CAAC,YAAY,CAAC,oBAAoB,CAAC,CAAA;aAC1C,CAAC,CAAA;SACL,CAAC,CAAA;KACH;;;;;;;IAQM,0CAAqB,GAA5B,UAA6B,WAAmB;QAAhD,iBAqCC;QApCC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,KAAI,CAAC,gBAAgB,CAAC,WAAW,CAAC;iBAC/B,IAAI,CAAC,UAAA,GAAG;gBACP,KAAI,CAAC,MAAM;qBACR,OAAO,CAAC,iBAAiB,CAAC,oBAAoB,EAAE;oBAC/C,GAAG,CAAC,EAAE;oBACN,OAAO;oBACP,OAAO;oBACP,GAAG;iBACJ,CAAC;qBACD,IAAI,CAAC,UAAA,YAAY;oBAChB,IAAM,GAAG,GAAG,YAAY,CAAC,GAAG,CAAC,UAAC,EAAO;wBACnC,IAAM,WAAW,GAAG,IAAI,WAAW,CAAC,EAAE,CAAC,CAAA;;wBAEvC,WAAW,CAAC,mBAAmB,GAAG,IAAIK,YAAU,CAAC,UAAA,UAAU;4BACzD,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,cAAc,CAAC;iCAC5C,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAA,CAAC;iCAC9C,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,GAAA,CAAC,CAAA;yBACrC,CAAC,CAAA;wBACF,WAAW,CAAC,iBAAiB,GAAG,IAAIA,YAAU,CAAC,UAAA,UAAU;4BACvD,KAAI,CAAC,cAAc,CAAC,WAAW,CAAC,YAAY,CAAC;iCAC1C,IAAI,CAAC,UAAA,OAAO,IAAI,OAAA,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAA,CAAC;iCAC9C,KAAK,CAAC,UAAA,GAAG,IAAI,OAAA,UAAU,CAAC,IAAI,CAAC,EAAE,CAAC,GAAA,CAAC,CAAA;yBACrC,CAAC,CAAA;wBACF,OAAO,WAAW,CAAA;qBACnB,CAAC,CAAA;oBACF,OAAO,CAAC,GAAG,CAAC,CAAA;iBACb,CAAC;qBACD,KAAK,CAAC,UAAA,GAAG;oBACR,MAAM,CAAC,YAAY,CAAC,gCAAgC,CAAC,CAAA;iBACtD,CAAC,CAAA;aACL,CAAC;iBACD,KAAK,CAAC,UAAA,GAAG;gBACR,MAAM,CAAC,YAAY,CAAC,gCAAgC,CAAC,CAAA;aACtD,CAAC,CAAA;SACL,CAAC,CAAA;KACH;;;;;;;;;;;IAYM,6BAAQ,GAAf,UACE,MAAc,EACd,WAAmB,EACnB,SAAiB,EACjB,IAAY,EACZ,UAAkB;QALpB,iBAsEC;QA/DC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAI,IAAI,IAAI,CAAC,UAAU,EAAE;gBACvB,MAAM,CAAC,YAAY,CAAC,qBAAqB,CAAC,CAAA;aAC3C;YACD,IAAM,UAAU,GAAG,IAAI,YAAY,EAAE,CAAA;YACrC,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,EAAE,WAAW,CAAC,CAAA;YACpD,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,EAAE,SAAS,CAAC,CAAA;YAClD,UAAU,CAAC,GAAG,CAAC,YAAY,CAAC,QAAQ,EAAE,QAAQ,CAAC,KAAK,CAAC,CAAA;YAErD,KAAI,CAAC,SAAS,CAAC,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,UAAA,MAAM;gBACnC,IAAA,yBAAa,EAAE,2BAAe,EAAE,iBAAK,CAAU;gBACtD,IAAI,CAAC,aAAa,EAAE;oBAClB,MAAM,CAAC,YAAY,CAAC,iCAAiC,CAAC,CAAA;iBACvD;gBACD,IAAI,CAAC,eAAe,EAAE;oBACpB,MAAM,CAAC,YAAY,CAAC,mCAAmC,CAAC,CAAA;iBACzD;gBAED,IAAM,KAAK,GAAW,QAAQ,CAAC,aAAa,EAAE,CAAA;gBAC9C,IAAM,aAAa,GAAG,aAAa;qBAChC,GAAG,CAAC,OAAO,CAAC;qBACZ,GAAG,CAAC,WAAW,CAAC;qBAChB,GAAG,CAAC,CAAC,CAAC;qBACN,GAAG,CAAC,CAAC,CAAC,CAAA;gBACT,IAAM,WAAW,GAAG,eAAe;qBAChC,GAAG,CAAC,OAAO,CAAC;qBACZ,GAAG,CAAC,WAAW,CAAC;qBAChB,GAAG,CAAC,CAAC,CAAC;qBACN,GAAG,CAAC,CAAC,CAAC,CAAA;gBAET,IAAM,WAAW,GAAS;oBACxB,IAAI,EAAE,aAAa;oBACnB,EAAE,EAAE,WAAW;oBACf,KAAK,EAAE,KAAK;oBACZ,OAAO,EAAE,WAAW,CAAC,mBAAmB,CACtC,IAAI,EACJ,UAAU,EACV,WAAW,EACX,KAAK,CACN;iBACF,CAAA;gBAED,IAAM,EAAE,GAAG,mBAAmB,CAAC,iBAAiB,EAAE,CAAA;gBAClD,IAAM,QAAQ,GAAsB;oBAClC,IAAI,EAAE,aAAa,CAAC,GAAG,CAAC,IAAI,CAAC;oBAC7B,EAAE,EAAE,eAAe,CAAC,GAAG,CAAC,IAAI,CAAC;oBAC7B,MAAM,EAAE,mBAAmB,CAAC,WAAW,CAAC,MAAM,EAAE,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;oBAChE,IAAI,EAAE,WAAW;iBAClB,CAAA;gBAED,mBAAmB,CAAC,YAAY,CAC9B,EAAE,IAAI,EAAE,wBAAwB,CAAC,QAAQ,EAAE,SAAS,EAAE,QAAQ,EAAE,EAChE,EAAE,CACH,CAAA;gBACD,mBAAmB,CAAC,oBAAoB,CAAC,EAAE,EAAE,UAAU,EAAE,aAAa,CAAC;qBACpE,IAAI,CAAC;oBACJ,OAAO,EAAE,CAAA;iBACV,CAAC;qBACD,KAAK,CAAC;oBACL,MAAM,EAAE,CAAA;iBACT,CAAC,CAAA;aACL,CAAC,CAAA;SACH,CAAC,CAAA;KACH;;;;;;;IAQM,+BAAU,GAAjB,UAAkB,OAAe;QAAjC,iBA0BC;QAzBC,OAAO,IAAI,OAAO,CAAC,UAAC,OAAO,EAAE,MAAM;YACjC,IAAM,OAAO,GAAG,IAAI,YAAY,EAAE,CAAA;YAClC,OAAO,CAAC,GAAG,CAAC,YAAY,CAAC,UAAU,EAAE,OAAO,CAAC,CAAA;YAE7C,KAAI,CAAC,SAAS;iBACX,KAAK,CAAC,OAAO,CAAC;iBACd,IAAI,CAAC,UAAA,MAAM;gBACH,IAAA,mBAAO,CAAU;gBACxB,IAAM,KAAK,GAAG,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;gBAC/B,KAAI,CAAC,MAAM;qBACR,OAAO,CAAC,iBAAiB,CAAC,kBAAkB,EAAE;oBAC7C,KAAK;oBACL,CAAC,QAAQ,CAAC,QAAQ,CAAC;iBACpB,CAAC;qBACD,IAAI,CAAC,UAAA,GAAG;oBACP,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAA;iBACvB,CAAC;qBACD,KAAK,CAAC,UAAA,GAAG;oBACR,MAAM,CAAC,GAAG,CAAC,CAAA;iBACZ,CAAC,CAAA;aACL,CAAC;iBACD,KAAK,CAAC;gBACL,MAAM,EAAE,CAAA;aACT,CAAC,CAAA;SACL,CAAC,CAAA;KACH;IACH,iBAAC;CAAA;;ACxUK,IAAA,uCAA0D;IAAxD,cAAI;IAAE,4BAAW,CAAuC;AACxD,IAAA,mDAAU,CAAgC;AAOlD;IAqCE,cAAoB,MAAkB;QACpC,IAAI,CAAC,OAAO,GAAG,MAAM,CAAA;KACtB;IAhCD,sBAAI,yBAAO;aAAX;YACE,OAAO,IAAI,CAAC,QAAQ,CAAA;SACrB;;;OAAA;IAED,sBAAI,yBAAO;aAAX;YACE,OAAO,IAAI,CAAC,QAAQ,CAAA;SACrB;;;OAAA;IAEa,WAAM,GAApB,UACE,MAAkB,EAClB,GAAe,EACf,cAAiC;QADjC,oBAAA,EAAA,UAAe;QACf,+BAAA,EAAA,4BAAiC;QAEjC,IAAM,IAAI,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,CAAA;QAC7B,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC,QAAQ,EAAE,cAAc,CAAC,CAAA;QAChD,IAAI,CAAC,SAAS,GAAG,WAAW,CAAC,MAAM,CAAC,MAAM,EAAE,GAAG,EAAE,UAAU,CAAC,CAAA;QAC5D,IAAM,oBAAoB,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CACjD,MAAM,CAAC,sBAAsB,EAC7B,GAAG,CACJ,CAAA;QACD,IAAI,CAAC,MAAM,GAAG,IAAI,QAAQ,CAAC,oBAAoB,CAAC,CAAA;QAChD,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QAC3D,IAAI,CAAC,QAAQ,GAAG,IAAI,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,IAAI,CAAC,MAAM,CAAC,CAAA;QAC3D,OAAO,IAAI,CAAA;KACZ;IAEO,yBAAU,GAAlB,UAAmB,OAAe,EAAE,WAAgB;QAClD,QAAQ,CAAC,UAAU,CAAC,OAAO,EAAE,WAAW,CAAC,CAAA;KAC1C;IAKH,WAAC;CAAA;;AC5CD;IAaE;KAAwB;IARxB,sBAAI,wBAAI;aAAR;YACE,OAAO,IAAI,CAAC,KAAK,CAAA;SAClB;;;OAAA;IAEa,eAAQ,GAAtB;QACE,OAAO,IAAI,CAAC,SAAS,KAAK,IAAI,CAAC,SAAS,GAAG,IAAI,MAAM,EAAE,CAAC,CAAA;KACzD;IAID,2BAAU,GAAV,UAAW,MAAoB;;QAE7B,IAAI,CAAC,OAAO,GAAG,MAAM,CAAA;QACrB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC;YACvB,sBAAsB,EAAE,MAAM,CAAC,sBAAsB;YACrD,QAAQ,EAAE,MAAM,CAAC,QAAQ;SAC1B,CAAC,CAAA;KACH;IACH,aAAC;CAAA;;AC9BK,IAAAX,wDAI+C,CAAA;AAErD;IAAA;KAwBC;IAvBe,gBAAU,GAAxB,UAAyB,UAAkB;QACzC,OAAO,WAAW,CAAC,UAAU,CAAC,UAAU,CAAC,CAAA;KAC1C;IAqBH,YAAC;CAAA;;;;"}