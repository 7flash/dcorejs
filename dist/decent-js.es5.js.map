{"version":3,"file":"decent-js.es5.js","sources":["../src/api/database.ts","../src/api/chain.ts","../src/crypt.ts","../src/utils.ts","../src/transaction.ts","../src/content.ts","../src/account.ts","../src/core.ts","../src/decent.ts"],"sourcesContent":["export class ConnectionStatus {\n    static open = 'open';\n}\n\nexport class SearchParamsOrder {\n    static authorAsc = '+author';\n    static ratingAsc = '+rating';\n    static sizeAsc = '+size';\n    static priceAsc = '+price';\n    static createdAsc = '+created';\n    static expirationAsc = '+expiration';\n    static authorDesc = '-author';\n    static ratingDesc = '-rating';\n    static sizeDesc = '-size';\n    static priceDesc = '-price';\n    static createdDesc = '-created';\n    static expirationDesc = '-expiration';\n}\n\nexport class SearchAccountHistoryOrder {\n    static typeAsc = '+type';\n    static toAsc = '+to';\n    static fromAsc = '+from';\n    static priceAsc = '+price';\n    static feeAsc = '+fee';\n    static descriptionAsc = '+description';\n    static timeAsc = '+time';\n    static typeDesc = '-type';\n    static toDesc = '-to';\n    static fromDesc = '-from';\n    static priceDesc = '-price';\n    static feeDesc = '-fee';\n    static descriptionDesc = '-description';\n    static timeDesc = '-time';\n}\n\n/**\n * Parameters for content search.\n * Order parameter options can be found in SearchParamsOrder class, Default: SearchParamsOrder.createdDesc\n * Region code is ISO 3166-1 alpha-2 two-letter region code.\n */\nexport class SearchParams {\n    term = '';\n    order = '';\n    user = '';\n    region_code = '';\n    itemId = '';\n    category = '';\n    count: number;\n\n    constructor(term = '',\n                order = '',\n                user = '',\n                region_code = '',\n                itemId = '',\n                category: string = '',\n                count: number = 6) {\n        this.term = term || '';\n        this.order = order || SearchParamsOrder.createdDesc;\n        this.user = user || '';\n        this.region_code = region_code || '';\n        this.itemId = itemId || '0.0.0';\n        this.category = category || '1';\n        this.count = count || 6;\n    }\n\n    get params(): any[] {\n        let params: any[] = [];\n        params = Object.values(this).reduce((previousValue, currentValue) => {\n            previousValue.push(currentValue);\n            return previousValue;\n        }, params);\n        return params;\n    }\n}\n\nexport class DatabaseError {\n    static chain_connection_failed = 'chain_connection_failed';\n    static chain_connecting = 'chain_connecting';\n    static database_execution_failed = 'database_execution_failed';\n}\n\nclass DatabaseOperationName {\n    static searchContent = 'search_content';\n    static getAccountByName = 'get_account_by_name';\n    static getAccounts = 'get_accounts';\n    static searchAccountHistory = 'search_account_history';\n    static getAccountBalances = 'get_account_balances';\n    static generateContentKeys = 'generate_content_keys';\n    static restoreEncryptionKey = 'restore_encryption_key';\n    static getBuyingObjectsByConsumer = 'get_buying_objects_by_consumer';\n    static listPublishers = 'list_seeders_by_price';\n    static getObjects = 'get_objects';\n    static getBuyingHistoryObjects = 'get_buying_by_consumer_URI';\n}\n\nexport class DatabaseOperation {\n    protected _name: string;\n    protected _parameters: any[];\n\n    get name(): string {\n        return this._name;\n    }\n\n    get parameters(): any[] {\n        return this._parameters;\n    }\n\n    constructor(name: string, ...params: any[]) {\n        this._name = name;\n        this._parameters = params;\n    }\n}\n\nexport namespace DatabaseOperations {\n    export class SearchContent extends DatabaseOperation {\n        constructor(searchParams: SearchParams) {\n            const [\n                term,\n                order,\n                user,\n                region_code,\n                itemId,\n                category,\n                count\n            ] = searchParams.params;\n            super(\n                DatabaseOperationName.searchContent,\n                term,\n                order,\n                user,\n                region_code,\n                itemId,\n                category,\n                count\n            );\n        }\n    }\n\n    export class GetAccountByName extends DatabaseOperation {\n        constructor(name: string) {\n            super(DatabaseOperationName.getAccountByName, name);\n        }\n    }\n\n    export class GetAccounts extends DatabaseOperation {\n        constructor(ids: string[]) {\n            super(DatabaseOperationName.getAccounts, ids);\n        }\n    }\n\n    export class SearchAccountHistory extends DatabaseOperation {\n        constructor(accountId: string,\n                    order: string,\n                    startObjecId: string = '0.0.0',\n                    limit = 100) {\n            super(\n                DatabaseOperationName.searchAccountHistory,\n                accountId,\n                order,\n                startObjecId,\n                limit\n            );\n        }\n    }\n\n    export class GetAccountBalances extends DatabaseOperation {\n        constructor(accountId: string, assetsId: string[]) {\n            super(DatabaseOperationName.getAccountBalances, accountId, assetsId);\n        }\n    }\n\n    export class RestoreEncryptionKey extends DatabaseOperation {\n        constructor(contentId: string, elGamalPrivate: string) {\n            super(\n                DatabaseOperationName.restoreEncryptionKey,\n                {s: elGamalPrivate},\n                contentId\n            );\n        }\n    }\n\n    export class GenerateContentKeys extends DatabaseOperation {\n        constructor(seeders: string[]) {\n            super(DatabaseOperationName.generateContentKeys, seeders);\n        }\n    }\n\n    export class ListSeeders extends DatabaseOperation {\n        constructor(resultSize: number) {\n            super(DatabaseOperationName.listPublishers, resultSize);\n        }\n    }\n\n    export class GetBoughtObjectsByCustomer extends DatabaseOperation {\n        constructor(consumerId: string,\n                    order: string,\n                    startObjectId: string,\n                    term: string,\n                    resultSize: number) {\n            super(\n                DatabaseOperationName.getBuyingObjectsByConsumer,\n                consumerId,\n                order,\n                startObjectId,\n                term,\n                resultSize\n            );\n        }\n    }\n\n    export class GetObjects extends DatabaseOperation {\n        constructor(ids: string[]) {\n            super(DatabaseOperationName.getObjects, ids);\n        }\n    }\n\n    export class GetBuyingHistoryObjects extends DatabaseOperation {\n        constructor(accountId: string, contentURI: string) {\n            super(DatabaseOperationName.getBuyingHistoryObjects, accountId, contentURI);\n        }\n    }\n}\n\nexport interface DatabaseConfig {\n    decent_network_wspaths: string[];\n}\n\nexport class Database {\n    protected _api: any;\n}\n\nexport class DatabaseApi extends Database {\n    private _config: DatabaseConfig;\n    protected _api: any;\n    private _connectionStatus: string;\n    private _apiConnector: Promise<any>;\n\n    public static create(config: DatabaseConfig, api: any): DatabaseApi {\n        return new DatabaseApi(config, api);\n    }\n\n    private dbApi(): any {\n        return this._api.instance().db_api();\n    }\n\n    constructor(config: DatabaseConfig, api: any) {\n        super();\n        this._config = config;\n        this._api = api;\n    }\n\n    public initApi(addresses: string[], forApi: any): Promise<any> {\n        // TODO: when not connected yet, calls throws errors\n        forApi.setRpcConnectionStatusCallback((status: any) => {\n            this._connectionStatus = status;\n        });\n        this._apiConnector = new Promise((resolve, reject) => {\n            this.connectDaemon(\n                forApi,\n                addresses,\n                () => {\n                    resolve();\n                },\n                (error: Error) => {\n                    reject(error);\n                }\n            );\n        });\n        return this._apiConnector;\n    }\n\n    private connectDaemon(toApi: any,\n                          addresses: string[],\n                          onSuccess: () => void,\n                          onError: (error: Error) => void,\n                          addressIndex: number = 0): Promise<any> | boolean {\n        if (addresses.length === addressIndex) {\n            onError(this.handleError(DatabaseError.chain_connection_failed, ''));\n            return false;\n        }\n        const address = addresses[addressIndex];\n\n        return toApi\n            .instance(address, true)\n            .init_promise.then(() => {\n                onSuccess();\n            })\n            .catch((reason: any) => {\n                this.connectDaemon(\n                    toApi,\n                    addresses,\n                    onSuccess,\n                    onError,\n                    addressIndex + 1\n                );\n            });\n    }\n\n    public exec(operation: DatabaseOperation): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this._apiConnector.then(() => {\n                this.dbApi()\n                    .exec(operation.name, operation.parameters)\n                    .then((content: any) => resolve(content))\n                    .catch((err: any) => {\n                        reject(\n                            this.handleError(DatabaseError.chain_connection_failed, err)\n                        );\n                    });\n            });\n        });\n    }\n\n    public execute(operation: DatabaseOperation): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this._apiConnector.then(() => {\n                this.dbApi()\n                    .exec(operation.name, operation.parameters)\n                    .then((content: any) => resolve(content))\n                    .catch((err: any) => {\n                        reject(\n                            this.handleError(DatabaseError.database_execution_failed, err)\n                        );\n                    });\n            });\n        });\n    }\n\n    private handleError(message: string, err: any): Error {\n        const error = new Error(message);\n        error.stack = err;\n        return error;\n    }\n}\n","import * as DecentLib from 'decentjs-lib';\n\nexport class ChainError {\n    static command_execution_failed = 'command_execution_failed';\n}\n\nexport interface ChainMethod {\n    name: string;\n    param: any;\n}\n\n/**\n * Listing of methods available to be called\n * in blockchain.\n */\nexport class ChainMethods {\n    static getAccount = 'getAccount';\n    static getAsset = 'getAsset';\n    static getObject = 'getObject';\n\n    private _commands: ChainMethod[] = [];\n    get commands(): ChainMethod[] {\n        return this._commands;\n    }\n\n    add(method: string, params: any) {\n        this._commands.push({ name: method, param: params });\n    }\n}\n\nexport class ChainApi {\n\n    static asset = 'DCT';\n    static asset_id = '1.3.0';\n    static DCTPower = Math.pow(10, 8);\n    private _apiConnector: Promise<any>;\n\n    /**\n     * Generates random sequence of bytes\n     */\n    public static generateNonce(): string {\n        return DecentLib.TransactionHelper.unique_nonce_uint64();\n    }\n\n    public static setupChain(chainId: string, chainConfig: any) {\n        chainConfig.networks.decent = {\n            chain_id: chainId\n        };\n    }\n\n    constructor(apiConnector: Promise<any>) {\n        this._apiConnector = apiConnector;\n    }\n\n    /**\n     * Fetches data from blockchain with given chain methods.\n     *\n     * Returns Promise.all with resolve result as array of results\n     * in order of adding into ChainMethod\n     *\n     * @param {ChainMethods} methods\n     * @return {Promise<any[]>}\n     */\n    public fetch(methods: ChainMethods): Promise<any[]> {\n        return new Promise((resolve, reject) => {\n            this._apiConnector.then(() => {\n                DecentLib.ChainStore.init().then(() => {\n                    const commands = methods.commands\n                        .map(op => DecentLib.FetchChain(op.name, op.param));\n                    Promise.all(commands)\n                        .then(result => resolve(result))\n                        .catch(err => {\n                            const e = new Error(ChainError.command_execution_failed);\n                            e.stack = err;\n                            reject(e);\n                        });\n                });\n            });\n        });\n    }\n}\n","import { KeyPrivate, KeyPublic } from './utils';\n\nimport * as DecentLib from 'decentjs-lib';\nconst RIPEMD160 = require('ripemd160');\n\nexport class CryptoUtils {\n    /**\n     * Encrypts message with given private-pubic key pair\n     *\n     * @param {string} message\n     * @param {KeyPrivate} privateKey\n     * @param {KeyPublic} publicKey\n     * @param {string} [nonce]\n     * @return {Buffer}\n     */\n    public static encryptWithChecksum(message: string,\n                                      privateKey: KeyPrivate,\n                                      publicKey: KeyPublic,\n                                      nonce: string = ''): Buffer {\n        return DecentLib.Aes.encrypt_with_checksum(privateKey.key, publicKey.key, nonce, message);\n    }\n\n    public static decryptWithChecksum(message: string, privateKey: KeyPrivate, publicKey: KeyPublic, nonce: string = ''): Buffer {\n        return DecentLib.Aes.decrypt_with_checksum(privateKey.key, publicKey.key, nonce, message);\n    }\n\n    public static ripemdHash(fromBuffer: Buffer): string {\n        return new RIPEMD160().update(fromBuffer).digest('hex');\n    }\n}\n","import { CryptoUtils } from './crypt';\n\nimport * as DecentLib from 'decentjs-lib';\n\nexport class Utils {\n\n    public static ripemdHash(fromBuffer: Buffer): string {\n        return CryptoUtils.ripemdHash(fromBuffer);\n    }\n\n    /**\n     * Generates private and public key from given brain key.\n     *\n     * Return array of keys in form [privateKey: KeyPrivate, publicKey: KeyPublic]\n     *\n     * @param {string} fromBrainKey\n     * @return {any[]} [privateKey: KeyPrivate, publicKey: KeyPublic]\n     */\n    public static generateKeys(fromBrainKey: string): any[] {\n        const pkey: KeyPrivate = Utils.generatePrivateKey(fromBrainKey);\n        const pubKey: KeyPublic = Utils.getPublicKey(pkey);\n        return [pkey, pubKey];\n    }\n\n    /**\n     * Calculate public key from given private key.\n     *\n     * @param {KeyPrivate} privkey\n     * @return {KeyPublic}\n     */\n    public static getPublicKey(privkey: KeyPrivate): KeyPublic {\n        const publicKey: any = privkey.key.toPublicKey();\n        return new KeyPublic(publicKey);\n    }\n\n    public static privateKeyFromWif(pkWif: string): KeyPrivate {\n        const pKey = DecentLib.PrivateKey.fromWif(pkWif);\n        return new KeyPrivate(pKey);\n    }\n\n    public static publicKeyFromString(pubKeyString: string): KeyPublic {\n        const pubKey = DecentLib.PublicKey.fromPublicKeyString(pubKeyString);\n        return new KeyPublic(pubKey);\n    }\n\n    private static generatePrivateKey(brainKey: string): KeyPrivate {\n        const pKey = DecentLib.key.get_brainPrivateKey(brainKey);\n        return new KeyPrivate(pKey);\n    }\n}\n\n/**\n * PKI private key\n */\nexport class KeyPrivate {\n    private _privateKey: any;\n\n    constructor(privateKey: any) {\n        this._privateKey = privateKey;\n    }\n\n    /**\n     * Raw representation of key for decent-js\n     * library purposes.\n     * @return {any}\n     */\n    get key(): any {\n        return this._privateKey;\n    }\n\n    /**\n     * WIF format string representation of key\n     * @return {string}\n     */\n    get stringKey(): string {\n        return this._privateKey.toWif();\n    }\n\n}\n\n/**\n * PKI public key\n */\nexport class KeyPublic {\n    private _publicKey: any;\n\n    constructor(publicKey: any) {\n        this._publicKey = publicKey;\n    }\n\n    /**\n     * Raw representation of key for decent-js\n     * library purposes.\n     * @return {any}\n     */\n    get key(): any {\n        return this._publicKey;\n    }\n\n    /**\n     * String representation of key\n     * @return {string}\n     */\n    get stringKey(): string {\n        return this._publicKey.toString();\n    }\n\n}\n","import { KeyPrivate, KeyPublic, Utils } from './utils';\n\nimport * as DecentLib from 'decentjs-lib';\n/**\n * OperationType to be broadcasted to blockchain\n * internal representation\n */\nexport interface Operation {\n    name: string;\n    operation: OperationType;\n}\n\n/**\n * Class contains available transaction operation names constants\n */\nexport class OperationName {\n    static transfer = 'transfer';\n    static content_cancellation = 'content_cancellation';\n    static requestToBuy = 'request_to_buy';\n    static content_submit = 'content_submit';\n}\n\n/**\n * Asset represent amount of specific\n * asset.\n */\nexport class Asset {\n    amount: number;\n    asset_id: string;\n}\n\n/**\n * Memo message object representation\n */\nexport interface Memo {\n    from: string;\n    to: string;\n    nonce: string;\n    message: Buffer;\n}\n\n/**\n * OperationType operations generalization\n */\nexport interface OperationType {}\n\n/**\n * Transfer operation between two accounts\n * represented by from/to string ids\n *\n * !Important: asset need to be calculated to specific asset\n */\nexport interface TransferOperation extends OperationType {\n    from: string;\n    to: string;\n    amount: Asset;\n    memo: Memo;\n}\n\nexport interface ContentCancelOperation extends OperationType {\n    author: string;\n    URI: string;\n}\n\nexport interface BuyContentOperation extends OperationType {\n    URI: string;\n    consumer: string;\n    price: Asset;\n    region_code_from: number;\n    pubKey: Key;\n}\n\nexport interface SubmitContentOperation extends OperationType {\n    size: number;\n    author: string;\n    co_authors: any[];\n    URI: string;\n    quorum: number;\n    price: RegionalPrice[];\n    hash: string;\n    seeders: string[];\n    key_parts: KeyParts[];\n    expiration: string;\n    publishing_fee: Asset;\n    synopsis: string;\n}\n\n// userRights: content.userRights,\n\nexport interface Key {\n    s: string;\n}\n\nexport interface KeyParts {\n    C1: Key;\n    D1: Key;\n}\n\nexport interface RegionalPrice {\n    region: number;\n    price: Asset;\n}\n\nexport class Transaction {\n    /**\n     * decentjs.lib/lib - TransactionBuilder\n     */\n    private _transaction: any;\n    private _operations: Operation[] = [];\n\n    constructor() {\n        this._transaction = new DecentLib.TransactionBuilder();\n    }\n\n    /**\n     * List of operations added to transaction\n     * @return {Operation[]}\n     */\n    get operations(): Operation[] {\n        return this._operations;\n    }\n\n    /**\n     * Append new operation to transaction object.\n     *\n     * @param {Operation} operation\n     * @return {boolean}\n     */\n    public addOperation(operation: Operation): boolean {\n        if (!DecentLib.ops.hasOwnProperty(operation.name)) {\n            return false;\n        }\n        DecentLib.ops[operation.name].keys.forEach((key: string) => {\n            return operation.operation.hasOwnProperty(key);\n        });\n        this._transaction.add_type_operation(operation.name, operation.operation);\n        this._operations.push(operation);\n        return true;\n    }\n\n    /**\n     * Broadcast transaction to decent blockchain.\n     *\n     * @param {string} privateKey\n     * @return {Promise<any>}\n     */\n    public broadcast(privateKey: string): Promise<any> {\n        const secret = Utils.privateKeyFromWif(privateKey);\n        const pubKey = Utils.getPublicKey(secret);\n        return new Promise((resolve, reject) => {\n            this.setTransactionFees()\n                .then(() => {\n                    this.signTransaction(secret, pubKey);\n                    this._transaction.broadcast()\n                        .then(() => {\n                            resolve();\n                        })\n                        .catch((err: any) => {\n                            reject(err);\n                        });\n                })\n                .catch((err: any) => {\n                    reject(err);\n                });\n        });\n    }\n\n    /**\n     * Set transaction fee required for transaction operation\n     * @param transaction TransactionBuilder instance\n     * @return {Promise<any>}\n     */\n    private setTransactionFees(): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this._transaction.set_required_fees()\n                .then(() => {\n                    resolve();\n                })\n                .catch(() => {\n                    // TODO: error handling\n                    reject();\n                });\n        });\n    }\n\n    /**\n     * Sign transaction with given private/public key pair.\n     *\n     * @param {KeyPrivate} privateKey\n     * @param {KeyPublic} publicKey\n     */\n    private signTransaction(privateKey: KeyPrivate, publicKey: KeyPublic): void {\n        this._transaction.add_signer(privateKey.key, publicKey.key);\n    }\n}\n","import { DatabaseApi, DatabaseOperations, SearchParams, SearchParamsOrder } from './api/database';\nimport { ChainApi, ChainMethods } from './api/chain';\nimport {\n    BuyContentOperation,\n    ContentCancelOperation,\n    Key,\n    KeyParts,\n    OperationName,\n    SubmitContentOperation,\n    Transaction\n} from './transaction';\nimport { Asset } from './account';\nconst moment = require('moment');\n\nexport class ContentError {\n    static database_operation_failed = 'operation_failed';\n    static fetch_content_failed = 'fetch_content_failed';\n    static transaction_broadcast_failed = 'transaction_broadcast_failed';\n    static restore_content_keys_failed = 'restore_content_keys_failed';\n}\n\nexport interface SubmitObject {\n    authorId: string;\n    seeders: Array<any>;\n    fileName: string;\n    fileContent: Buffer;\n    date: string;\n    fileSize: number;\n    price: number;\n    size: number;\n    URI: string;\n    hash: string;\n    keyParts: KeyParts[];\n    synopsis: Synopsis;\n}\n\nexport interface Content {\n    /**\n     * If of the content.\n     */\n    id: string;\n    /**\n     * Id of content's buy object, for download purposes.\n     */\n    buy_id?: string;\n    author: string;\n    price: Price;\n    synopsis: Synopsis;\n    status: Status;\n    URI: string;\n    _hash: string;\n    AVG_rating: number;\n    size: number;\n    expiration: string;\n    created: string;\n    times_bought: number;\n}\n\nexport interface Synopsis {\n    title: string;\n    description: string;\n    content_type_id: string;\n    file_name: string;\n    language: string;\n    sampleURL: string;\n    fileFormat: string;\n    length: string;\n    content_licence: string;\n    thumbnail: string;\n    userRights: string;\n}\n\nexport class KeyPair {\n    private _public: string;\n    private _private: string;\n    get privateKey(): string {\n        return this._private;\n    }\n\n    get publicKey(): string {\n        return this._public;\n    }\n\n    constructor(privateKey: string, publicKey: string) {\n        this._private = privateKey;\n        this._public = publicKey;\n    }\n}\n\nexport class ContentType {\n    private _appId: number;\n    private _category: number;\n    private _subCategory: number;\n    private _isInappropriate: boolean;\n\n    constructor(appId: number,\n        category: number,\n        subCategory: number,\n        isInappropriate: boolean) {\n        this._appId = appId;\n        this._category = category;\n        this._subCategory = subCategory;\n        this._isInappropriate = isInappropriate;\n    }\n\n    public getId(): string {\n        return `${this._appId}.${this._category}.${this._subCategory}.${this\n            ._isInappropriate}`;\n    }\n}\n\nexport interface Price {\n    amount: number;\n    asset_id: string;\n}\n\nexport class Status {\n    static Uploaded = 'Uploaded';\n    static Partially_uploaded = 'Partially uploaded';\n    static Uploading = 'Uploading';\n    static Expired = 'Expired';\n}\n\nexport interface Seeder {\n    id: string;\n    seeder: string;\n    free_space: number;\n    price: Asset;\n    expiration: string;\n    pubKey: Key;\n    ipfs_ID: string;\n    stats: string;\n    rating: number;\n    region_code: string;\n}\n\n/**\n * ContentApi provide methods to communication\n * with content stored in decent network.\n */\nexport class ContentApi {\n    private _dbApi: DatabaseApi;\n    private _chainApi: ChainApi;\n\n    constructor(dbApi: DatabaseApi, chainApi: ChainApi) {\n        this._dbApi = dbApi;\n        this._chainApi = chainApi;\n    }\n\n    public searchContent(searchParams: SearchParams): Promise<Content[]> {\n        const dbOperation = new DatabaseOperations.SearchContent(searchParams);\n        return new Promise((resolve, reject) => {\n            this._dbApi\n                .execute(dbOperation)\n                .then((content: any) => {\n                    content.forEach((c: any) => {\n                        c.synopsis = JSON.parse(c.synopsis);\n                    });\n                    resolve(content);\n                })\n                .catch((err: any) => {\n                    reject(this.handleError(ContentError.database_operation_failed, err));\n                });\n        });\n    }\n\n    /**\n     * Fetch content object from blockchain for given content id\n     *\n     * @param {string} id example: '1.2.345'\n     * @return {Promise<Content>}\n     */\n    public getContent(id: string): Promise<Content> {\n        return new Promise((resolve, reject) => {\n            const dbOperation = new DatabaseOperations.GetObjects([id]);\n            this._dbApi\n                .execute(dbOperation)\n                .then(contents => {\n                    const [content] = contents;\n                    const stringidied = JSON.stringify(content);\n                    const objectified = JSON.parse(stringidied);\n                    objectified.synopsis = JSON.parse(objectified.synopsis);\n                    resolve(objectified as Content);\n                })\n                .catch(err => {\n                    reject(err);\n                });\n        });\n    }\n\n    /**\n     * Cancel submitted content record from blockchain.\n     *\n     * @param {string} contentId example: '2.13.1234'\n     * @param {string} authorId example: '1.2.532'\n     * @param {string} privateKey\n     * @return {Promise<any>}\n     */\n    public removeContent(contentId: string,\n        authorId: string,\n        privateKey: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.getContent(contentId)\n                .then((content: Content) => {\n                    const URI = content.URI;\n                    const methods = new ChainMethods();\n                    methods.add(ChainMethods.getAccount, authorId);\n\n                    const cancellation: ContentCancelOperation = {\n                        author: authorId,\n                        URI: URI\n                    };\n                    const transaction = new Transaction();\n                    transaction.addOperation({\n                        name: OperationName.content_cancellation,\n                        operation: cancellation\n                    });\n                    transaction\n                        .broadcast(privateKey)\n                        .then(() => {\n                            resolve();\n                        })\n                        .catch(err => {\n                            reject(\n                                this.handleError(ContentError.transaction_broadcast_failed, err)\n                            );\n                        });\n                })\n                .catch(err => {\n                    reject(this.handleError(ContentError.fetch_content_failed, err));\n                });\n        });\n    }\n\n    /**\n     * Restores key to decrypt downloaded content.\n     *\n     * ElGamalPrivate contains keys used to identify if user have bought content.\n     * May contains older keys, if elGamal keys pair were changed,\n     * to restore content bought before keys have been changed. Otherwise content keys\n     * would not be restored.\n     *\n     * @param {string} contentId                example: '1.2.453'\n     * @param {...string[]} elGamalPrivate\n     * @returns {Promise<string>}\n     * @memberof ContentApi\n     */\n    public restoreContentKeys(contentId: string, accountId: string, ...elGamalPrivate: KeyPair[]): Promise<string> {\n        // const dbOperation = new DatabaseOperations.RestoreEncryptionKey(\n        //     contentId,\n        //     elGamalPrivate[0]\n        // );\n\n        return new Promise((resolve, reject) => {\n            this.getContent(contentId)\n            .then(content => {\n                const dbOperation = new DatabaseOperations.GetBuyingHistoryObjects(accountId, content.URI);\n                this._dbApi.execute(dbOperation)\n                .then(res => {\n                    console.log(res);\n                    const validKey = elGamalPrivate.find((elgPair: KeyPair) => elgPair.publicKey === res.pubKey.s);\n                    if (!validKey) {\n                        reject(this.handleError(ContentError.restore_content_keys_failed, 'wrong keys'));\n                    }\n\n                    const dbOperation = new DatabaseOperations.RestoreEncryptionKey(contentId, validKey.privateKey);\n                    this._dbApi\n                        .execute(dbOperation)\n                        .then(key => {\n                            resolve(key);\n                        })\n                        .catch(err => {\n                            reject(this.handleError(ContentError.restore_content_keys_failed, err));\n                        });\n                });\n            });\n        });\n    }\n\n    /**\n     * Obtains content key with key parts of each seeder to encrypt\n     * content to be uploaded.\n     *\n     * @param {string[]} seeders Array of seeders ids example: ['1.2.12', '1.4.13']\n     * @return {Promise<any>}\n     */\n    public generateContentKeys(seeders: string[]): Promise<any> {\n        const dbOperation = new DatabaseOperations.GenerateContentKeys(seeders);\n        return new Promise((resolve, reject) => {\n            this._dbApi\n                .execute(dbOperation)\n                .then(keys => {\n                    resolve(keys);\n                })\n                .catch(err => {\n                    reject(this.handleError(ContentError.database_operation_failed, err));\n                });\n        });\n    }\n\n    /**\n     * Submit content to blockchain\n     * Need to supply control checksum 'ripemdHash' and\n     * 'key' generated by seeders in getContentKeys\n     *\n     * @param {SubmitObject} content\n     * @param {string} privateKey\n     * @param {string} publicKey\n     * @return {Promise<any>}\n     */\n    public addContent(content: SubmitObject, privateKey: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            content.size = this.getFileSize(content.size);\n            const submitOperation: SubmitContentOperation = {\n                size: content.size,\n                author: content.authorId,\n                co_authors: [],\n                URI: content.URI,\n                quorum: content.seeders.length,\n                price: [\n                    {\n                        region: 1,\n                        price: {\n                            amount: content.price,\n                            asset_id: ChainApi.asset_id\n                        }\n                    }\n                ],\n                hash: content.hash,\n                seeders: content.seeders.map(s => s.seeder),\n                key_parts: content.keyParts,\n                expiration: content.date,\n                publishing_fee: {\n                    amount: this.calculateFee(content),\n                    asset_id: ChainApi.asset_id\n                },\n                synopsis: JSON.stringify(content.synopsis)\n            };\n            const transaction = new Transaction();\n            transaction.addOperation({\n                name: OperationName.content_submit,\n                operation: submitOperation\n            });\n            transaction\n                .broadcast(privateKey)\n                .then(() => {\n                    resolve();\n                })\n                .catch(err => {\n                    reject(\n                        this.handleError(ContentError.transaction_broadcast_failed, err)\n                    );\n                });\n        });\n    }\n\n    private getFileSize(fileSize: number): number {\n        return Math.ceil(fileSize / (1024 * 1024));\n    }\n\n    private calculateFee(content: SubmitObject): number {\n        const num_days = moment(content.date).diff(moment(), 'days') + 1;\n        const fee = Math.ceil(\n            this.getFileSize(content.fileSize) *\n            content.seeders.reduce(\n                (fee, seed) => fee + seed.price.amount * num_days,\n                0\n            )\n        );\n        return fee;\n    }\n\n    /**\n     * Request buy content.\n     *\n     * @param {string} contentId Id of content to be bought, example: '1.2.123'\n     * @param {string} buyerId Account id of user buying content, example: '1.2.123'\n     * @param {string} elGammalPub ElGammal public key which will be used to identify users bought content\n     * @param {string} privateKey\n     * @return {Promise<any>}\n     */\n    public buyContent(contentId: string,\n        buyerId: string,\n        elGammalPub: string,\n        privateKey: string): Promise<any> {\n        return new Promise((resolve, reject) => {\n            this.getContent(contentId)\n                .then((content: Content) => {\n                    const buyOperation: BuyContentOperation = {\n                        URI: content.URI,\n                        consumer: buyerId,\n                        price: content.price,\n                        region_code_from: 1,\n                        pubKey: { s: elGammalPub }\n                    };\n                    const transaction = new Transaction();\n                    transaction.addOperation({\n                        name: OperationName.requestToBuy,\n                        operation: buyOperation\n                    });\n                    transaction\n                        .broadcast(privateKey)\n                        .then(() => {\n                            resolve();\n                        })\n                        .catch((err: any) => {\n                            reject(\n                                this.handleError(ContentError.transaction_broadcast_failed, err)\n                            );\n                        });\n                })\n                .catch(err => {\n                    reject(this.handleError(ContentError.fetch_content_failed, err));\n                });\n        });\n    }\n\n    /**\n     * List available seeders ordered by price.\n     *\n     * @param {number} resultSize   Number of results per request. Default 100(max)\n     * @return {Promise<Seeder[]>}\n     */\n    public getSeeders(resultSize: number = 100): Promise<Seeder[]> {\n        const dbOperation = new DatabaseOperations.ListSeeders(resultSize);\n        return new Promise((resolve, reject) => {\n            this._dbApi\n                .execute(dbOperation)\n                .then(result => {\n                    resolve(result as Seeder[]);\n                })\n                .catch(err => {\n                    reject(this.handleError(ContentError.database_operation_failed, err));\n                });\n        });\n    }\n\n    /**\n     * Return all purchased content for account id.\n     *\n     * @param {string} accountId example: '1.2.345'\n     * @param {string} order example: '1.2.345'\n     * @param {string} startObjectId example: '1.2.345'\n     * @param {string} term example: '1.2.345'\n     * @param {number} resultSize Number of results default = 100\n     * @return {Promise<Content[]>}\n     */\n    public getPurchasedContent(accountId: string,\n        order: string = SearchParamsOrder.createdDesc,\n        startObjectId: string = '0.0.0',\n        term: string = '',\n        resultSize: number = 100): Promise<Content[]> {\n        return new Promise((resolve, reject) => {\n            if (!accountId) {\n                reject('missing_parameter');\n                return;\n            }\n            const searchParams = new SearchParams();\n            searchParams.count = resultSize;\n            this.searchContent(searchParams)\n                .then(allContent => {\n                    const dbOperation = new DatabaseOperations.GetBoughtObjectsByCustomer(\n                        accountId,\n                        order,\n                        startObjectId,\n                        term,\n                        resultSize\n                    );\n                    this._dbApi\n                        .execute(dbOperation)\n                        .then(boughtContent => {\n                            const result: Content[] = [];\n                            boughtContent.forEach((bought: any) => {\n                                allContent.forEach(content => {\n                                    if (bought.URI === content.URI) {\n                                        bought.synopsis = JSON.parse(bought.synopsis);\n                                        content.buy_id = bought.id;\n                                        result.push(content as Content);\n                                    }\n                                });\n                            });\n                            resolve(result);\n                        })\n                        .catch(err => {\n                            reject(\n                                this.handleError(ContentError.database_operation_failed, err)\n                            );\n                        });\n                })\n                .catch(err => {\n                    reject(this.handleError(ContentError.fetch_content_failed, err));\n                });\n        });\n    }\n\n    private handleError(message: string, err: any): Error {\n        const error = new Error(message);\n        error.stack = err;\n        return error;\n    }\n}\n","import {Database, DatabaseApi, DatabaseOperations, SearchAccountHistoryOrder} from './api/database';\nimport { ChainApi, ChainMethods } from './api/chain';\nimport {CryptoUtils} from './crypt';\nimport {Memo, OperationName, Transaction, TransferOperation} from './transaction';\nimport {KeyPrivate, Utils} from './utils';\n\nexport interface TransactionRaw {\n    id: string;\n    m_from_account: string;\n    m_operation_type: number;\n    m_str_description: string;\n    m_timestamp: string;\n    m_to_account: string;\n    m_transaction_amount: Asset;\n    m_transaction_fee: Asset;\n}\n\nexport interface Account {\n    id: string;\n    registrar: string;\n    name: string;\n    owner: Authority;\n    active: Authority;\n    options: Options;\n    rights_to_publish: PublishRights;\n    statistics: string;\n    top_n_control_flags: number;\n}\n\nexport interface PublishRights {\n    is_publishing_manager: boolean;\n    publishing_rights_received: any[];\n    publishing_rights_forwarded: any[];\n}\n\nexport class Asset {\n    amount: number;\n    asset_id: string;\n\n    public static createAsset(amount: number, assetId: string): Asset {\n        return {\n            amount: Math.floor(amount * ChainApi.DCTPower),\n            asset_id: assetId\n        };\n    }\n}\n\nexport interface Authority {\n    weight_threshold: number;\n    account_auths: any[];\n    key_auths: KeyAuth[];\n}\n\nexport class KeyAuth {\n    private _key: string;\n    private _value: number;\n\n    constructor(key: string, value: number = 1) {\n        this._key = key;\n        this._value = value;\n    }\n\n    public keyAuthFormat(): any[] {\n        return [this._key, this._value];\n    }\n}\n\nexport interface Options {\n    memo_key: string;\n    voting_account: string;\n    num_miner: number;\n    votes: any[];\n    extensions: any[];\n    allow_subscription: boolean;\n    price_per_subscribe: Asset;\n    subscription_period: number;\n}\n\nexport class TransactionRecord {\n    fromAccountName: string;\n    toAccountName: string;\n    fromAccountId: string;\n    toAccountId: string;\n    operationType: number;\n    transactionAmount: number;\n    transactionFee: number;\n    description: string;\n    timestamp: string;\n    memo: TransactionMemo;\n    memoString: string;\n\n    constructor(transaction: any, privateKeys: string[]) {\n        this.fromAccountId = transaction.m_from_account;\n        this.toAccountId = transaction.m_to_account;\n        this.operationType = transaction.m_operation_type;\n        this.transactionAmount = transaction.m_transaction_amount.amount;\n        this.transactionFee = transaction.m_transaction_fee.amount;\n        this.description = transaction.m_str_description;\n        this.timestamp = transaction.m_timestamp;\n        this.memo = new TransactionMemo(transaction);\n        this.memoString = this.memo.decryptedMessage(privateKeys);\n        console.log(`done : ${this.memoString}`);\n    }\n}\n\nexport class TransactionMemo {\n    valid: boolean;\n    from: string;\n    message: string;\n    nonce: string;\n    to: string;\n\n    constructor(transaction: any) {\n        if (!transaction.m_transaction_encrypted_memo) {\n            this.valid = false;\n        } else {\n            this.valid = true;\n            this.from = transaction.m_transaction_encrypted_memo.from;\n            this.message = transaction.m_transaction_encrypted_memo.message;\n            this.nonce = transaction.m_transaction_encrypted_memo.nonce;\n            this.to = transaction.m_transaction_encrypted_memo.to;\n        }\n    }\n\n    decryptedMessage(privateKeys: string[]): string {\n        if (!this.valid) {\n            return '';\n        }\n        const pubKey = Utils.publicKeyFromString(this.to);\n        let decrypted = '';\n\n        privateKeys.forEach(pk => {\n            let pKey: KeyPrivate;\n            try {\n                pKey = Utils.privateKeyFromWif(pk);\n                try {\n                    decrypted = CryptoUtils.decryptWithChecksum(this.message, pKey, pubKey, this.nonce).toString();\n                } catch (err) {\n                    throw new Error(AccountError.account_keys_incorrect);\n                }\n            } catch (err) {\n            }\n        });\n        return decrypted;\n    }\n}\n\nexport class AccountError {\n    static account_does_not_exist = 'account_does_not_exist';\n    static account_fetch_failed = 'account_fetch_failed';\n    static transaction_history_fetch_failed = 'transaction_history_fetch_failed';\n    static transfer_missing_pkey = 'transfer_missing_pkey';\n    static transfer_sender_account_not_found = 'transfer_sender_account_not_found';\n    static transfer_receiver_account_not_found = 'transfer_receiver_account_not_found';\n    static database_operation_failed = 'database_operation_failed';\n    static transaction_broadcast_failed = 'transaction_broadcast_failed';\n    static account_keys_incorrect = 'account_keys_incorrect';\n}\n\n/**\n * API class provides wrapper for account information.\n */\nexport class AccountApi {\n    private _dbApi: DatabaseApi;\n    private _chainApi: ChainApi;\n\n    constructor(dbApi: Database, chainApi: ChainApi) {\n        this._dbApi = dbApi as DatabaseApi;\n        this._chainApi = chainApi;\n    }\n\n    /**\n     * Gets chain account for given Account name.\n     *\n     * @param {string} name         example: \"u123456789abcdef123456789\"\n     * @return {Promise<Account>}\n     */\n    public getAccountByName(name: string): Promise<Account> {\n        const dbOperation = new DatabaseOperations.GetAccountByName(name);\n        return new Promise((resolve, reject) => {\n            this._dbApi.execute(dbOperation)\n                .then((account: Account) => {\n                    resolve(account as Account);\n                })\n                .catch(err => {\n                    reject(this.handleError(AccountError.account_fetch_failed, err));\n                });\n        });\n    }\n\n    /**\n     * Gets chain account for given Account id.\n     *\n     * @param {string} id           example: \"1.2.345\"\n     * @return {Promise<Account>}\n     */\n    public getAccountById(id: string): Promise<Account> {\n        const dbOperation = new DatabaseOperations.GetAccounts([id]);\n        return new Promise((resolve, reject) => {\n            this._dbApi.execute(dbOperation)\n                .then((accounts: Account[]) => {\n                    if (accounts.length === 0) {\n                        reject(\n                            this.handleError(AccountError.account_does_not_exist, `${id}`)\n                        );\n                    }\n                    const [account] = accounts;\n                    resolve(account as Account);\n                })\n                .catch(err => {\n                    reject(this.handleError(AccountError.account_fetch_failed, err));\n                });\n        });\n    }\n\n    /**\n     * Gets transaction history for given Account name.\n     *\n     * @param {string} accountId                example: \"1.2.345\"\n     * @param {string} order                    SearchAccountHistoryOrder class holds all available options.\n     *                                          Default SearchParamsOrder.createdDesc\n     * @param {string[]} privateKeys            Array of private keys in case private/public pair has been changed\n     *                                          to be able of decrypt older memo messages from transactions.\n     * @param {string} startObjectId            Id of object to start search from for paging purposes. Default 0.0.0\n     * @param {number} resultLimit              Number of returned transaction history records for paging. Default 100(max)\n     * @return {Promise<TransactionRecord[]>}\n     */\n    public getTransactionHistory(accountId: string,\n                                 privateKeys: string[],\n                                 order: string = SearchAccountHistoryOrder.timeDesc,\n                                 startObjectId: string = '0.0.0',\n                                 resultLimit: number = 100): Promise<TransactionRecord[]> {\n        return new Promise((resolve, reject) => {\n            const dbOperation = new DatabaseOperations.SearchAccountHistory(\n                accountId,\n                order,\n                startObjectId,\n                resultLimit\n            );\n            this._dbApi.execute(dbOperation)\n                .then((transactions: any[]) => {\n                    console.log(transactions);\n                    const namePromises: Promise<string>[] = [];\n                    const res = transactions.map((tr: any) => {\n                        const transaction = new TransactionRecord(tr, privateKeys);\n\n                        namePromises.push(new Promise((resolve, reject) => {\n                            this.getAccountById(transaction.fromAccountId)\n                                .then(account => {\n                                    transaction.fromAccountName = account.name;\n                                    resolve();\n                                })\n                                .catch(err => reject(this.handleError(AccountError.account_fetch_failed, err)));\n                        }));\n\n                        namePromises.push(new Promise((resolve, reject) => {\n                            this.getAccountById(transaction.toAccountId)\n                                .then(account => {\n                                    transaction.toAccountName = account.name;\n                                    resolve();\n                                })\n                                .catch(err => reject(this.handleError(AccountError.account_fetch_failed, err)));\n                        }));\n\n                        return transaction;\n                    });\n                    Promise.all(namePromises)\n                        .then(() => {\n                            resolve(res);\n                        })\n                        .catch(err => {\n                            reject(this.handleError(AccountError.account_fetch_failed, err));\n                        });\n                })\n                .catch(err => {\n                    reject(\n                        this.handleError(AccountError.transaction_history_fetch_failed, err)\n                    );\n                });\n        });\n    }\n\n    /**\n     * Transfers exact amount of DCT between accounts with optional\n     * message for recipient\n     *\n     * @param {number} amount\n     * @param {string} fromAccount      Name or id of account\n     * @param {string} toAccount        Name or id of account\n     * @param {string} memo             Message for recipient\n     * @param {string} privateKey       Private key used to encrypt memo and sign transaction\n     */\n    public transfer(amount: number,\n                    fromAccount: string,\n                    toAccount: string,\n                    memo: string,\n                    privateKey: string): Promise<any> {\n        const pKey = Utils.privateKeyFromWif(privateKey);\n\n        return new Promise((resolve, reject) => {\n            if (memo && !privateKey) {\n                reject(AccountError.transfer_missing_pkey);\n            }\n            const operations = new ChainMethods();\n            operations.add(ChainMethods.getAccount, fromAccount);\n            operations.add(ChainMethods.getAccount, toAccount);\n            operations.add(ChainMethods.getAsset, ChainApi.asset);\n\n            this._chainApi.fetch(operations).then(result => {\n                const [senderAccount, receiverAccount, asset] = result;\n                if (!senderAccount) {\n                    reject(\n                        this.handleError(\n                            AccountError.transfer_sender_account_not_found,\n                            `${fromAccount}`\n                        )\n                    );\n                }\n                if (!receiverAccount) {\n                    reject(\n                        this.handleError(\n                            AccountError.transfer_receiver_account_not_found,\n                            `${toAccount}`\n                        )\n                    );\n                }\n\n                const nonce: string = ChainApi.generateNonce();\n                const fromPublicKey = senderAccount\n                    .get('owner')\n                    .get('key_auths')\n                    .get(0)\n                    .get(0);\n                const toPublicKey = receiverAccount\n                    .get('owner')\n                    .get('key_auths')\n                    .get(0)\n                    .get(0);\n\n                const pubKey = Utils.publicKeyFromString(toPublicKey);\n\n                const memo_object: Memo = {\n                    from: fromPublicKey,\n                    to: toPublicKey,\n                    nonce: nonce,\n                    message: CryptoUtils.encryptWithChecksum(\n                        memo,\n                        pKey,\n                        pubKey,\n                        nonce\n                    )\n                };\n\n                const transfer: TransferOperation = {\n                    from: senderAccount.get('id'),\n                    to: receiverAccount.get('id'),\n                    amount: Asset.createAsset(amount, asset.get('id')),\n                    memo: memo_object\n                };\n\n                const transaction = new Transaction();\n                transaction.addOperation({\n                    name: OperationName.transfer,\n                    operation: transfer\n                });\n                transaction.broadcast(privateKey)\n                    .then(res => {\n                        resolve();\n                    })\n                    .catch(err => {\n                        reject(\n                            this.handleError(AccountError.transaction_broadcast_failed, err)\n                        );\n                    });\n            });\n        });\n    }\n\n    /**\n     * Current account balance of DCT asset on given account\n     *\n     * @param {string} accountId    Account id, example: '1.2.345'\n     * @return {Promise<number>}\n     */\n    public getBalance(accountId: string): Promise<number> {\n        return new Promise((resolve, reject) => {\n            if (!accountId) {\n                reject('missing_parameter');\n                return;\n            }\n            const dbOperation = new DatabaseOperations.GetAccountBalances(accountId, [\n                ChainApi.asset_id\n            ]);\n            this._dbApi.execute(dbOperation)\n                .then(res => {\n                    resolve(res[0].amount / ChainApi.DCTPower);\n                })\n                .catch(err => {\n                    reject(this.handleError(AccountError.database_operation_failed, err));\n                });\n        });\n    }\n\n    private handleError(message: string, err: any): Error {\n        const error = new Error(message);\n        error.stack = err;\n        return error;\n    }\n}\n","import { ContentApi } from './content';\nimport { DatabaseApi } from './api/database';\nimport { ChainApi } from './api/chain';\nimport { AccountApi } from './account';\n\nimport * as DecentLib from 'decentjs-lib';\n\nexport interface CoreConfig {\n    decent_network_wspaths: string[];\n    chain_id: string;\n}\n\nexport class Core {\n    private _content: ContentApi;\n    private _account: AccountApi;\n    private _database: DatabaseApi;\n    private _chain: ChainApi;\n\n    get content(): ContentApi {\n        return this._content;\n    }\n\n    get account(): AccountApi {\n        return this._account;\n    }\n\n    public static create(config: CoreConfig,\n                         api: any = DecentLib.Apis,\n                         chainConfigApi: any = DecentLib.ChainConfig): Core {\n        const core = new Core();\n        core.setupChain(config.chain_id, chainConfigApi);\n        core._database = DatabaseApi.create(config, api);\n        const apiConnectionPromise = core._database.initApi(\n            config.decent_network_wspaths,\n            api\n        );\n        core._chain = new ChainApi(apiConnectionPromise);\n        core._content = new ContentApi(core._database, core._chain);\n        core._account = new AccountApi(core._database, core._chain);\n        return core;\n    }\n\n    private setupChain(chainId: string, chainConfig: any) {\n        ChainApi.setupChain(chainId, chainConfig);\n    }\n\n    private constructor() {\n    }\n}\n","import { Core } from './core';\n\nexport class DecentError {\n    static app_not_initialized = 'app_not_initialized';\n    static app_missing_config = 'app_missing_config';\n}\n\nexport interface DecentConfig {\n    decent_network_wspaths: string[]\n    chain_id: string\n}\n\nexport class Decent {\n    // private static _config: DecentConfig;\n    private static _core: Core;\n\n    public static get core(): Core | null {\n        if (!Decent._core) {\n            throw new Error(DecentError.app_not_initialized);\n        }\n        return Decent._core;\n    }\n\n\n\n    public static initialize(config: DecentConfig): void {\n        if (config.decent_network_wspaths[0] === '' || config.chain_id === '') {\n            throw new Error(DecentError.app_missing_config);\n        }\n\n        if (Decent._core) {\n            return;\n        }\n\n        Decent._core = Core.create({\n            decent_network_wspaths: config.decent_network_wspaths,\n            chain_id: config.chain_id\n        });\n    }\n\n    private constructor() {\n    }\n}\n"],"names":["DecentLib.TransactionHelper","DecentLib.ChainStore","DecentLib.FetchChain","DecentLib.Aes","DecentLib.PrivateKey","DecentLib.PublicKey","DecentLib.key","DecentLib.TransactionBuilder","DecentLib.ops","key","Asset","DecentLib.Apis","DecentLib.ChainConfig"],"mappings":"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"}