/// <reference types="node" />
import { DatabaseApi } from './api/database';
import { ChainApi } from './api/chain';
import { KeyParts } from './transactionOperator';
export interface SubmitObject {
    authorId: string;
    seeders: Array<any>;
    fileName: string;
    fileContent: Buffer;
    date: string;
    fileSize: number;
    price: number;
    size: number;
    URI: string;
    hash: string;
    keyParts: KeyParts[];
    synopsis: Synopsis;
}
export interface Content {
    id: string;
    author: string;
    price: Price;
    synopsis: Synopsis;
    status: Status;
    URI: string;
    _hash: string;
    AVG_rating: number;
    size: number;
    expiration: string;
    created: string;
    times_bought: number;
}
export interface Synopsis {
    title: string;
    description: string;
    content_type_id: string;
    file_name: string;
    language: string;
    sampleURL: string;
    fileFormat: string;
    length: string;
    content_licence: string;
    thumbnail: string;
    userRights: string;
}
export declare class ContentType {
    private _appId;
    private _category;
    private _subCategory;
    private _isInappropriate;
    constructor(appId: number, category: number, subCategory: number, isInappropriate: boolean);
    getId(): string;
}
export interface Price {
    amount: number;
    asset_id: string;
}
export declare class Status {
    static Uploaded: string;
    static Partially_uploaded: string;
    static Uploading: string;
    static Expired: string;
}
export declare class SearchParamsOrder {
    static authorAsc: string;
    static ratingAsc: string;
    static sizeAsc: string;
    static priceAsc: string;
    static createdAsc: string;
    static expirationAsc: string;
    static authorDesc: string;
    static ratingDesc: string;
    static sizeDesc: string;
    static priceDesc: string;
    static createdDesc: string;
    static expirationDesc: string;
}
/**
 * Parameters for content search.
 * Order parameter options can be found in SearchParamsOrder class
 * Region code is ISO 3166-1 alpha-2 two-letter region code.
 */
export declare class SearchParams {
    term: string;
    order: string;
    user: string;
    region_code: string;
    itemId: string;
    category: string;
    count: number;
    constructor(term: string | undefined, order: string | undefined, user: string | undefined, region_code: string | undefined, itemId: string | undefined, category: string, count?: number);
    readonly params: any[];
}
/**
 * ContentApi provide methods to communication
 * with content stored in decent network.
 */
export declare class ContentApi {
    private _dbApi;
    private _chainApi;
    constructor(dbApi: DatabaseApi, chainApi: ChainApi);
    searchContent(searchParams: SearchParams): Promise<Content[]>;
    getContent(id: string): Promise<Content>;
    /**
       * Cancel submitted content record from blockchain.
       *
       * @param {string} URI example: 'ipfs:abc78b7a9b7a98b7c98cb798c7b9a8bc9a87bc98a9bc'
       * @param {string} authorId example: '1.2.532'
       * @param {string} privateKey
       * @return {Promise<any>}
       */
    removeContent(URI: string, authorId: string, privateKey: string): Promise<any>;
    /**
       * Restores key to decrypt downloaded content.
       *
       * ElGammalPrivate key is used to identify if user have bought content.
       *
       * @param {String} contentId example: '1.2.453'
       * @param {string} elGammalPrivate
       * @return {Promise<string>} Key to decrypt content
       */
    restoreContentKeys(contentId: String, elGammalPrivate: string): Promise<string>;
    /**
       * Obtains content key with key parts of each seeder to encrypt
       * content to be uploaded.
       *
       * @param {string[]} seeders Array of seeders ids example: ['1.2.12', '1.4.13']
       * @return {Promise<any>}
       */
    generateContentKeys(seeders: string[]): Promise<any>;
    /**
       * Submit content to blockchain
       * Need to supply control checksum 'ripemdHash' and
       * 'key' generated by seeders in getContentKeys
       *
       * @param {SubmitObject} content
       * @param {string} privateKey
       * @param {string} publicKey
       * @return {Promise<any>}
       */
    addContent(content: SubmitObject, privateKey: string, publicKey: string): Promise<any>;
    private getFileSize(fileSize);
    private calculateFee(content);
    /**
       * Request buy content.
       *
       * @param {string} contentId Id of content to be bought, example: '1.2.123'
       * @param {string} buyerId Account id of user buying content, example: '1.2.123'
       * @param {string} elGammalPub ElGammal public key which will be used to identify users bought content
       * @param {string} privateKey
       * @param {string} pubKey
       * @return {Promise<any>}
       */
    buyContent(contentId: string, buyerId: string, elGammalPub: string, privateKey: string, pubKey: string): Promise<any>;
}
